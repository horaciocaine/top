a:2:{s:7:"current";a:7:{s:4:"date";a:2:{s:7:"created";i:1167392728;s:8:"modified";i:1171467632;}s:7:"creator";s:12:"Chris Corbyn";s:11:"last_change";b:0;s:11:"contributor";a:2:{i:0;N;s:6:"d11wtq";s:12:"Chris Corbyn";}s:5:"title";s:24:"Swift_Connection_Rotator";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:24:"swift_connection_rotator";s:5:"title";s:24:"Swift_Connection_Rotator";s:4:"type";s:2:"ul";s:5:"level";i:1;}}s:8:"abstract";s:507:"Synopsis: new Swift_Connection_Rotator( [array connections] )

Much like the Multi connection, the Rotator connection also provides redundancy.  However, in addition it also provides a fairly unintelligent way to load balance between connections.

You provide it with a collection of different connections (possibly including some other rotating ones if you're crazy enough to do so ;)) and it tries each one in turn until one works, the rest are marked as “dead” internally and will not be retried. …";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}}s:10:"persistent";a:4:{s:4:"date";a:2:{s:7:"created";i:1167392728;s:8:"modified";i:1171467632;}s:7:"creator";s:12:"Chris Corbyn";s:11:"last_change";b:0;s:11:"contributor";a:2:{i:0;N;s:6:"d11wtq";s:12:"Chris Corbyn";}}}