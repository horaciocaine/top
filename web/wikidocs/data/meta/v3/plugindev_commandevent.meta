a:2:{s:7:"current";a:6:{s:4:"date";a:1:{s:7:"created";i:1171812429;}s:7:"creator";s:12:"Chris Corbyn";s:11:"last_change";b:0;s:5:"title";s:26:"How to use CommandListener";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:26:"how_to_use_commandlistener";s:5:"title";s:26:"How to use CommandListener";s:4:"type";s:2:"ul";s:5:"level";i:1;}}s:8:"abstract";s:503:"A plugin which implements the Swift_Events_CommandListener interface will be invoked whenever Swift has sent a command.  The CommandEvent object which is passed is the same object as the one a plugin implementing BeforeCommandListener would have already seen.  Therefore, any changes made before the command is issued will be also seen here after the command has been issued.  More often than not, BeforeCommandListener will be more useful than CommandListener.  We could use something like this to mâ€¦";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}}s:10:"persistent";a:3:{s:4:"date";a:1:{s:7:"created";i:1171812429;}s:7:"creator";s:12:"Chris Corbyn";s:11:"last_change";b:0;}}