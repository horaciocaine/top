<?xml version="1.0" encoding="utf-8"?>
<!-- generator="FeedCreator 1.7.2-ppt DokuWiki" -->
<?xml-stylesheet href="http://www.swiftmailer.org/wikidocs/lib/exe/css.php?s=feed" type="text/css"?>
<rdf:RDF
    xmlns="http://purl.org/rss/1.0/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel rdf:about="http://www.swiftmailer.org/wikidocs/feed.php">
        <title>SwiftMailer Docs</title>
        <description></description>
        <link>http://www.swiftmailer.org/wikidocs/</link>
        <image rdf:resource="http://www.swiftmailer.org/wikidocs/lib/images/favicon.ico" />
       <dc:date>2009-08-03T14:25:59+00:00</dc:date>
        <items>
            <rdf:Seq>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tutorials/form2mail?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/form2mail?rev=1173709141&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugins/decorator?rev=1178574627&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugin_decorator?rev=1206526940&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v4/examples/multiple_recipients?rev=1211436900&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tutorials/multirecipients?rev=1181248375&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/multirecipients?rev=1171450165&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending/basics?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending_basics?rev=1171481302&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/connections/smtp?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/embedding_images?rev=1173265512&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/swift_connection_smtp?rev=1171479790&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v4/transports/sendmail?rev=1211530970&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tutorials/embedding_images?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugindev/sendevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugindev_sendevent?rev=1171575299&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v4/changes?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending/batch?rev=1179511456&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/recipients?rev=1171448980&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tutorials/recipients?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/batch?rev=1171784105&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tutorials/batch?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/start?rev=1190361270&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/start?rev=1239494836&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending/iterators?rev=1179422417&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v4/examples/multipart?rev=1211589594&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugin_bandwidthmonitor?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugins/bandwidthmonitor?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tips/spam?rev=1202990081&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/easy/swift_connection_smtp?rev=1236058880&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugin_verbose?rev=1174510700&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugins/verbose?rev=1175092542&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugindev_beforecommandevent?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/plugindev/beforecommandevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending_batch?rev=1171481485&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/connections/nativemail?rev=1180799008&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending/bounce_address?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending/multiple?rev=1174580242&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending_multiple?rev=1171481391&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/bounce_address?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v4/examples/basics?rev=1211435116&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tips_spam?rev=1171540378&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/multipart?rev=1171458349&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/tutorials/multipart?rev=1178577797&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v4/examples/html?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v4/examples/fluid_showoff?rev=1211437714&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending/message_ids?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/read_receipts?rev=1171481653&amp;do=diff"/>
                <rdf:li rdf:resource="http://www.swiftmailer.org/wikidocs/v3/sending/read_receipts?rev=1236058884&amp;do=diff"/>
            </rdf:Seq>
        </items>
    </channel>
    <image rdf:about="http://www.swiftmailer.org/wikidocs/lib/images/favicon.ico">
        <title>SwiftMailer Docs</title>
        <link>http://www.swiftmailer.org/wikidocs/</link>
        <url>http://www.swiftmailer.org/wikidocs/lib/images/favicon.ico</url>
    </image>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tutorials/form2mail?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:25+00:00</dc:date>
        <title>Sending an e-mail from a form with Swift</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tutorials/form2mail?rev=1236058885&amp;do=diff</link>
        <description>Ok, so Swift isn't going to write the form and handle user input for you.  I'll assume you already know how to deal with forms in PHP.  If you don't, you might want to read here first: &lt;http://www.w3schools.com/php/php_forms.asp&gt;.  The only thing Swift will do is create the email for you and send it.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/form2mail?rev=1173709141&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-12T14:19:01+00:00</dc:date>
        <title>Sending an e-mail from a form with Swift</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/form2mail?rev=1173709141&amp;do=diff</link>
        <description>Ok, so Swift isn't going to write the form and handle user input for you.  I'll assume you already know how to deal with forms in PHP.  If you don't, you might want to read here first: &lt;http://www.w3schools.com/php/php_forms.asp&gt;.  The only thing Swift will do is create the email for you and send it.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugins/decorator?rev=1178574627&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-07T21:50:27+00:00</dc:date>
        <title>Swift Message Decorator Plugin (For Customized Messages)</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugins/decorator?rev=1178574627&amp;do=diff</link>
        <description>Introduction to message decorating


Swift Mailer uses a caching system which operates on small units of the e-mail you compose.  If something's already been encoded/rendered and you try to encode/render it again swift reads the cache.  This offers a huge performance boost when sending the same message to many recipients.  Even once the message has been cached, you can change items such as the subject, body or transfer-encoding and Swift will use most of the message from the cache and re-render …</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugin_decorator?rev=1206526940&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-03-26T10:22:20+00:00</dc:date>
        <title>Swift Message Decorator Plugin (For Customized Messages)</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugin_decorator?rev=1206526940&amp;do=diff</link>
        <description>Introduction to message decorating


Swift Mailer uses a caching system which operates on small units of the e-mail you compose.  If something's already been encoded/rendered and you try to encode/render it again swift reads the cache.  This offers a huge performance boost when sending the same message to many recipients.  Even once the message has been cached, you can change items such as the subject, body or transfer-encoding and Swift will use most of the message from the cache and re-render …</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v4/examples/multiple_recipients?rev=1211436900&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-22T06:15:00+00:00</dc:date>
        <title>Sending to Several Recipients</title>
        <link>http://www.swiftmailer.org/wikidocs/v4/examples/multiple_recipients?rev=1211436900&amp;do=diff</link>
        <description>Sending to Several Recipients


This is much the same as sending a basic email.  You simply add more addresses to the array of setTo().

First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tutorials/multirecipients?rev=1181248375&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-07T20:32:55+00:00</dc:date>
        <title>Sending to multiple recipients</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tutorials/multirecipients?rev=1181248375&amp;do=diff</link>
        <description>In the previous tutorials you may have read, we've been providing recipient addresses using a string, or using the Swift_Address class.  However, Swift can send to Bcc recipients, Cc recipients and multiple To recipients.  For this, we use the Swift_RecipientList class.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/multirecipients?rev=1171450165&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T10:49:25+00:00</dc:date>
        <title>Sending to multiple recipients</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/multirecipients?rev=1171450165&amp;do=diff</link>
        <description>In the previous tutorials you may have read, we've been providing recipient addresses using a string, or using the Swift_Address class.  However, Swift can send to Bcc recipients, Cc recipients and multiple To recipients.  For this, we use the Swift_RecipientList class.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending/basics?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:24+00:00</dc:date>
        <title>Sending a message to a recipient</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending/basics?rev=1236058884&amp;do=diff</link>
        <description>Sending messages in Swift is extremely simple.  You call the send() method, which only has 3 parameters.  One is the message, one is the recipient, and the other is the sender.


$swift =&amp; new Swift(new Swift_Connection_SMTP(&quot;host.tld&quot;));

$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);

$sent = $swift-&gt;send($message, &quot;recipient@address.tld&quot;, &quot;sender@address.tld&quot;);
echo &quot;Sent to $sent recipients&quot;;</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending_basics?rev=1171481302&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:28:22+00:00</dc:date>
        <title>Sending a message to a recipient</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending_basics?rev=1171481302&amp;do=diff</link>
        <description>Sending messages in Swift is extremely simple.  You call the send() method, which only has 3 parameters.  One is the message, one is the recipient, and the other is the sender.


$swift =&amp; new Swift(new Swift_Connection_SMTP(&quot;host.tld&quot;));

$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);

$sent = $swift-&gt;send($message, &quot;recipient@address.tld&quot;, &quot;sender@address.tld&quot;);
echo &quot;Sent to $sent recipients&quot;;</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/connections/smtp?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:23+00:00</dc:date>
        <title>Swift_Connection_SMTP</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/connections/smtp?rev=1236058883&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_SMTP(string remote_host[, int remote_port [, int encryption_level]])

Getting connected to SMTP


The SMTP connection is probably the most heavily used connection, and almost certainly the most consistent and portable.  This connection opens up a socket with TCP and speaks “SMTP” to a remote SMTP server.  You need to have a SMTP server which is capable of relaying mail from the domain of your web server for this to work.  Some hosts provide a SMTP server for you as…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/embedding_images?rev=1173265512&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-07T11:05:12+00:00</dc:date>
        <title>Embedding images in HTML E-mails</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/embedding_images?rev=1173265512&amp;do=diff</link>
        <description>Once you have learned how to add attachments to an email with Swift, and how to send HTML emails with Swift, this will probably make sense.  Using HTML it's easy to add an &lt;img .. /&gt; tag to the message and link it to a remote image on your web server.  However, you can attach the image and link to the attachment directly.  This has it benefits, as well as its drawbacks (bandwidth!).  Many mail clients now block remote images by default, so embedding images could mean that your image is more like…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/swift_connection_smtp?rev=1171479790&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:03:10+00:00</dc:date>
        <title>Swift_Connection_SMTP</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/swift_connection_smtp?rev=1171479790&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_SMTP(string remote_host[, int remote_port [, int encryption_level]])

Getting connected to SMTP


The SMTP connection is probably the most heavily used connection, and almost certainly the most consistent and portable.  This connection opens up a socket with TCP and speaks “SMTP” to a remote SMTP server.  You need to have a SMTP server which is capable of relaying mail from the domain of your web server for this to work.  Some hosts provide a SMTP server for you as…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v4/transports/sendmail?rev=1211530970&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-23T08:22:50+00:00</dc:date>
        <title>SMTP Transport (Swift_SmtpTransport)</title>
        <link>http://www.swiftmailer.org/wikidocs/v4/transports/sendmail?rev=1211530970&amp;do=diff</link>
        <description>SMTP Transport (Swift_SmtpTransport)

What is it for?


The Sendmail Transport (named Swift_SendmailTransport) is for UNIX/Linux systems which use sendmail to send emails.  You will need to know where sendmail is installed in the server to use this class.  The typical locations for it are ”/sbin/sendmail” or ”/usr/sbin/sendmail”.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tutorials/embedding_images?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:25+00:00</dc:date>
        <title>Embedding images in HTML E-mails</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tutorials/embedding_images?rev=1236058885&amp;do=diff</link>
        <description>Once you have learned how to add attachments to an email with Swift, and how to send HTML emails with Swift, this will probably make sense.  Using HTML it's easy to add an &lt;img .. /&gt; tag to the message and link it to a remote image on your web server.  However, you can attach the image and link to the attachment directly.  This has it benefits, as well as its drawbacks (bandwidth!).  Many mail clients now block remote images by default, so embedding images could mean that your image is more like…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugindev/sendevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:23+00:00</dc:date>
        <title>How to use SendListener</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugindev/sendevent?rev=1236058883&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_SendListener interface will be invoked every time Swift has sent a message to a recipient.  The event passed is of type Swift_Events_SendEvent, just like the BeforeSendListener.  In fact, the event you get passed is actually a reference to that same event you would have already seen if your plugin implements BeforeSendListener!  So if you're plugin implements both SendListener and BeforeSendListener, you could change the SendEvent before the message is …</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugindev_sendevent?rev=1171575299&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-15T21:34:59+00:00</dc:date>
        <title>How to use SendListener</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugindev_sendevent?rev=1171575299&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_SendListener interface will be invoked every time Swift has sent a message to a recipient.  The event passed is of type Swift_Events_SendEvent, just like the BeforeSendListener.  In fact, the event you get passed is actually a reference to that same event you would have already seen if your plugin implements BeforeSendListener!  So if you're plugin implements both SendListener and BeforeSendListener, you could change the SendEvent before the message is …</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v4/changes?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:25+00:00</dc:date>
        <title>What's changed in Version 4?</title>
        <link>http://www.swiftmailer.org/wikidocs/v4/changes?rev=1236058885&amp;do=diff</link>
        <description>What's changed in Version 4?

No more PHP 4


Version 4 introduces a number of massive changes.  Probably the most significant change to end-users is the fact that Swift Mailer Version 4 does not work with PHP 4 at all.  I have no plans to support PHP 4 so please do not email me and beg me to do so ;)</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending/batch?rev=1179511456&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-18T18:04:16+00:00</dc:date>
        <title>Sending a batch email or newsletter</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending/batch?rev=1179511456&amp;do=diff</link>
        <description>When you send out an email marketing campaign, newsletter or any other type of batch email you don't particularly want to reveal everybody's address to the recipients.  One nasty hack is to Bcc all the recipients and leave the To: field undisclosed.  However, Swift provides a method specially for the purpose of sending out batch emails.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/recipients?rev=1171448980&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T10:29:40+00:00</dc:date>
        <title>Personalizing recipient names</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/recipients?rev=1171448980&amp;do=diff</link>
        <description>When you send an email with Swift you can just provide the address as a string.  However, if you want to send a personal name along with the address you will need to use the Swift_Address class*.  This class is simply making life easier for Swift to ensure addresses are given in the correct format when used in message headers and when sent to the SMTP server.  It's extremely basic and simply takes one or two arguments in the constructor.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tutorials/recipients?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:25+00:00</dc:date>
        <title>Personalizing recipient names</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tutorials/recipients?rev=1236058885&amp;do=diff</link>
        <description>When you send an email with Swift you can just provide the address as a string.  However, if you want to send a personal name along with the address you will need to use the Swift_Address class*.  This class is simply making life easier for Swift to ensure addresses are given in the correct format when used in message headers and when sent to the SMTP server.  It's extremely basic and simply takes one or two arguments in the constructor.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/batch?rev=1171784105&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-18T07:35:05+00:00</dc:date>
        <title>Sending a batch email</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/batch?rev=1171784105&amp;do=diff</link>
        <description>If you try to deliver an email to more than one recipient by using the Swift_RecipientList class in combination with Swift's send() method, you need to be aware that all the recipients of the message will be able to see each other's addresses in their mail clients.  This is fine for social/work emails, but if you were sending something like a newsletter or a marketing campaign it wouldn't look great and could even land you in trouble for breach of data protection.  To avoid any such problems, yo…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tutorials/batch?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:25+00:00</dc:date>
        <title>Sending a batch email</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tutorials/batch?rev=1236058885&amp;do=diff</link>
        <description>If you try to deliver an email to more than one recipient by using the Swift_RecipientList class in combination with Swift's send() method, you need to be aware that all the recipients of the message will be able to see each other's addresses in their mail clients.  This is fine for social/work emails, but if you were sending something like a newsletter or a marketing campaign it wouldn't look great and could even land you in trouble for breach of data protection.  To avoid any such problems, yo…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/start?rev=1190361270&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-21T07:54:30+00:00</dc:date>
        <title>Swift Mailer 3</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/start?rev=1190361270&amp;do=diff</link>
        <description>Swift Mailer 3


Version 3 is the latest release.  It offers many beneficial changes over Version 2.

Library API Reference

	*  PHP4 API Documentation
	*  PHP5 API Documentation

Tutorials

	*  Sending a basic email
	*  Sending a HTML email
	*  Sending a multipart email
	*  Personalizing recipient names
	*  Catching useful errors
	*  Sending attachments
	*  Embedding images in HTML emails
	*  Sending to multiple recipients and/or copying to recipients
	*  Sending a batch email without revealing…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/start?rev=1239494836&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-04-12T00:07:16+00:00</dc:date>
        <title>Swift Mailer</title>
        <link>http://www.swiftmailer.org/wikidocs/start?rev=1239494836&amp;do=diff</link>
        <description>Swift Mailer


Version 3 is now deprecated.  Unless you absolutely cannot upgrade yet, please download version 4 and use the version 4 documentation instead.

Download Version 4: &lt;http://swiftmailer.org/download&gt; 

Documentation for Version 4: &lt;http://swiftmailer.org/docs&gt;</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending/iterators?rev=1179422417&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-17T17:20:17+00:00</dc:date>
        <title>Using iterators to provide lists</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending/iterators?rev=1179422417&amp;do=diff</link>
        <description>As you have seen, you can make use of Swift_RecipientList to send a message to multiple recipients.  Up until now you've only seen the usage of addTo(), addCc() and addBcc().  You can completely by-pass these methods however.  Swift is provided with an iterator to loop over those addresses you have added and calling addTo() for example is simply pushing addresses onto an array.  By default Swift_RecipientList will provide an Array iterator so that the values added with addTo(), addCc() and addBc…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v4/examples/multipart?rev=1211589594&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-24T00:39:54+00:00</dc:date>
        <title>Sending a Multipart Email</title>
        <link>http://www.swiftmailer.org/wikidocs/v4/examples/multipart?rev=1211589594&amp;do=diff</link>
        <description>Sending a Multipart Email


First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message, add some parts to it and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugin_bandwidthmonitor?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:21+00:00</dc:date>
        <title>Swift Bandwidth Monitoring/Tracking Plugin</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugin_bandwidthmonitor?rev=1236058881&amp;do=diff</link>
        <description>Depending upon what you're doing, or shoud I say, the scale of what you're sending you may wish to keep track of how much bandwidth Swift is using.  This plugin measures the incoming and outgoing bandwidth through the connection.

NOTE: The figures are from Swift's point of view, not the server.  “Bytes in” refers to bytes from the SMTP server back into swift; “bytes out” refers to bytes sent from Swift to the SMTP server.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugins/bandwidthmonitor?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:24+00:00</dc:date>
        <title>Swift Bandwidth Monitoring/Tracking Plugin</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugins/bandwidthmonitor?rev=1236058884&amp;do=diff</link>
        <description>Depending upon what you're doing, or shoud I say, the scale of what you're sending you may wish to keep track of how much bandwidth Swift is using.  This plugin measures the incoming and outgoing bandwidth through the connection.

NOTE: The figures are from Swift's point of view, not the server.  “Bytes in” refers to bytes from the SMTP server back into swift; “bytes out” refers to bytes sent from Swift to the SMTP server.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tips/spam?rev=1202990081&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-02-14T11:54:41+00:00</dc:date>
        <title>How to (legitimately) minimize being seen as spam</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tips/spam?rev=1202990081&amp;do=diff</link>
        <description>This is a BIG topic and seemingly one that many people are quite patchy on.  I'll try to give you enough knowledge to make your own judgements and what you could do to minimize your risk.  You may finish up sad and disappointed by the end of this article though so don't build your hopes up that there's a quick-fix solution if you are being blocked as spam.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/easy/swift_connection_smtp?rev=1236058880&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:20+00:00</dc:date>
        <title>Swift_Connection_SMTP</title>
        <link>http://www.swiftmailer.org/wikidocs/easy/swift_connection_smtp?rev=1236058880&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_SMTP(string remote_host[, int remote_port [, int encryption_level]])

Getting connected to SMTP


The SMTP connection is probably the most heavily used connection, and almost certainly the most consistent and portable.  This connection opens up a socket with TCP and speaks “SMTP” to a remote SMTP server.  You need to have a SMTP server which is capable of relaying mail from the domain of your web server for this to work.  Some hosts provide a SMTP server for you as…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugin_verbose?rev=1174510700&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-21T20:58:20+00:00</dc:date>
        <title>Verbose Sending Plugin (Debug-use only)</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugin_verbose?rev=1174510700&amp;do=diff</link>
        <description>The verbose sending plugin dumps out green and red bars during the sending of batches in order to allow you to quickly identify recipients who are not going through the SMTP connection.  It's unlikely you'll need to use this plugin for anything other than debugging.  Usage is simple, all you have to do is load it into Swift along with the View class it uses (or one of your own).</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugins/verbose?rev=1175092542&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-28T14:35:42+00:00</dc:date>
        <title>Verbose Sending Plugin (Debug-use only)</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugins/verbose?rev=1175092542&amp;do=diff</link>
        <description>The verbose sending plugin dumps out green and red bars during the sending of batches in order to allow you to quickly identify recipients who are not going through the SMTP connection.  It's unlikely you'll need to use this plugin for anything other than debugging.  Usage is simple, all you have to do is load it into Swift along with the View class it uses (or one of your own).</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugindev_beforecommandevent?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:21+00:00</dc:date>
        <title>How to use BeforeCommandListener</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugindev_beforecommandevent?rev=1236058881&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_BeforeCommandListener interface will be invoked every time Swift is about to issue an SMTP command.  The plugin will have access to the command being executed and any changes made to the command inside the plugin will be executed at the time when the command would normally execute.  Plugins which implement either the CommandListener or BeforeCommandListener are most likely listening for those event by means of tracking the progress of sending an email r…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/plugindev/beforecommandevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:23+00:00</dc:date>
        <title>How to use BeforeCommandListener</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/plugindev/beforecommandevent?rev=1236058883&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_BeforeCommandListener interface will be invoked every time Swift is about to issue an SMTP command.  The plugin will have access to the command being executed and any changes made to the command inside the plugin will be executed at the time when the command would normally execute.  Plugins which implement either the CommandListener or BeforeCommandListener are most likely listening for those event by means of tracking the progress of sending an email r…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending_batch?rev=1171481485&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:31:25+00:00</dc:date>
        <title>Sending a batch email or newsletter</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending_batch?rev=1171481485&amp;do=diff</link>
        <description>We you send out an email marketing campaign, newsletter or any other type of batch email you don't particularly want to reveal everybody's address to the recipients.  One nasty hack is to Bcc all the recipients and leave the To: field undisclosed.  However, Swift provides a method specially for the purpose of sending out batch emails.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/connections/nativemail?rev=1180799008&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-02T15:43:28+00:00</dc:date>
        <title>Swift_Connection_NativeMail</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/connections/nativemail?rev=1180799008&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_NativeMail( void )

This is probably the simplest of all the connections to get to grips with.  It uses PHP's mail() function.  It takes no constructor parameters and requires no configuration.

NOTE: Due to differences between mail() in Windows and mail() on UNIX-like systems there will be small inconsistencies between running this connection on Windows and Linux/OS X.  These are perfectly fine.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending/bounce_address?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:24+00:00</dc:date>
        <title>Setting the Bounce detect, or Return-path address</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending/bounce_address?rev=1236058884&amp;do=diff</link>
        <description>When using SMTP, you don't always know if the message is going to reach the recipient.  If something goes wrong and you're really lucky you'll know about it at SMTP time if the server reports an error; if you're not so lucky, but not completely in the dark, you'll receive an email from a different server saying that something went wrong; and if you're completely unlucky, you'll just be left wondering why you never got a response from the recipient.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending/multiple?rev=1174580242&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-22T16:17:22+00:00</dc:date>
        <title>Sending to mulitple recipients</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending/multiple?rev=1174580242&amp;do=diff</link>
        <description>Sending to multiple recipients, or including Cc and Bcc recipients is handled by passing an instance of Swift_RecipientList as the recipient parameter in send().

Swift_RecipientList() contains the methods addTo(), addCc() and addBcc() along with removeTo(), removeCc() etc.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending_multiple?rev=1171481391&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:29:51+00:00</dc:date>
        <title>Sending to mulitple recipients</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending_multiple?rev=1171481391&amp;do=diff</link>
        <description>Sending to multiple recipients, or including Cc and Bcc recipients is handled by passing an instance of Swift_RecipientList as the recipient parameter in send().

Swift_RecipientList() contains the methods addTo(), addCc() and addBcc() along with removeTo(), removeCc() etc.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/bounce_address?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:21+00:00</dc:date>
        <title>Setting the Bounce detect, or Return-path address</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/bounce_address?rev=1236058881&amp;do=diff</link>
        <description>When using SMTP, you don't always know if the message is going to reach the recipient.  If something goes wrong and you're really lucky you'll know about it at SMTP time if the server reports an error; if you're not so lucky, but not completely in the dark, you'll receive an email from a different server saying that something went wrong; and if you're completely unlucky, you'll just be left wondering why you never got a response from the recipient.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v4/examples/basics?rev=1211435116&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-22T05:45:16+00:00</dc:date>
        <title>Sending a Basic Email</title>
        <link>http://www.swiftmailer.org/wikidocs/v4/examples/basics?rev=1211435116&amp;do=diff</link>
        <description>Sending a Basic Email


First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tips_spam?rev=1171540378&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-15T11:52:58+00:00</dc:date>
        <title>How to (legitimately) minimize being seen as spam</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tips_spam?rev=1171540378&amp;do=diff</link>
        <description>This is a BIG topic and seemingly one that many people are quite patchy on.  I'll try to give you enough knowledge to make your own judgements and what you could do to minimize your risk.  You may finish up sad and disappointed by the end of this article though so don't build your hopes up that there's a quick-fix solution if you are being blocked as spam.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/multipart?rev=1171458349&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T13:05:49+00:00</dc:date>
        <title>Sending a multipart email</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/multipart?rev=1171458349&amp;do=diff</link>
        <description>When you use a mail client such as Thunderbird to send an email in both HTML and Plain-text you are asking it to send a multipart message.  This uses a standard called MIME.  The essence of what's actually being sent is that rather than just sending one body of text and one set of headers, the email contains a main set of headers which identify it as having more than one part, and the body is replaced with two smaller documents, each with their own headers and bodies.  The mail client then decid…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/tutorials/multipart?rev=1178577797&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-07T22:43:17+00:00</dc:date>
        <title>Sending a multipart email</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/tutorials/multipart?rev=1178577797&amp;do=diff</link>
        <description>When you use a mail client such as Thunderbird to send an email in both HTML and Plain-text you are asking it to send a multipart message.  This uses a standard called MIME.  The essence of what's actually being sent is that rather than just sending one body of text and one set of headers, the email contains a main set of headers which identify it as having more than one part, and the body is replaced with two smaller documents, each with their own headers and bodies.  The mail client then decid…</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v4/examples/html?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:25+00:00</dc:date>
        <title>Sending a HTML Email</title>
        <link>http://www.swiftmailer.org/wikidocs/v4/examples/html?rev=1236058885&amp;do=diff</link>
        <description>Sending a HTML Email


First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message, specifying “text/html” as a content type and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v4/examples/fluid_showoff?rev=1211437714&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-22T06:28:34+00:00</dc:date>
        <title>Just for Kicks!</title>
        <link>http://www.swiftmailer.org/wikidocs/v4/examples/fluid_showoff?rev=1211437714&amp;do=diff</link>
        <description>Just for Kicks!


Swift Mailer Version 4 is very streamlined and aims to make typing the code as pain-free as possible.  One statement is less painful to write than 5 statements right?  I really don't expect anybody to do this, but just to show off how streamlined Swift can be, here's sending a message with an attachment using a single statement.</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending/message_ids?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:24+00:00</dc:date>
        <title>Working with Message-IDs</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending/message_ids?rev=1236058884&amp;do=diff</link>
        <description>Emails can contain a unique ID known as a message ID.  As of Swift version 3.1.4, Swift will generate this ID for you on a per-send basis (i.e. when you send a message an ID is created for it).  If you want to get the message ID yourself then you should override what Swift does and call the generateId() method of Swift_Message:</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/read_receipts?rev=1171481653&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:34:13+00:00</dc:date>
        <title>Requesting a Read-Receipt</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/read_receipts?rev=1171481653&amp;do=diff</link>
        <description>Read-Receipts are not very reliable since most emails clients will either prompt, or block them.  However, if you do desire to request a read-receipt you should set this in the message itself, before sending:


$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);
$message-&gt;requestReadReceipt(&quot;your@address.tld&quot;);</description>
    </item>
    <item rdf:about="http://www.swiftmailer.org/wikidocs/v3/sending/read_receipts?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T05:41:24+00:00</dc:date>
        <title>Requesting a Read-Receipt</title>
        <link>http://www.swiftmailer.org/wikidocs/v3/sending/read_receipts?rev=1236058884&amp;do=diff</link>
        <description>Read-Receipts are not very reliable since most emails clients will either prompt, or block them.  However, if you do desire to request a read-receipt you should set this in the message itself, before sending:


$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);
$message-&gt;requestReadReceipt(&quot;your@address.tld&quot;);</description>
    </item>
</rdf:RDF>
