


<h1><a name="an_introduction_to_swift_s_plugin_api" id="an_introduction_to_swift_s_plugin_api">An introduction to Swift's Plugin API</a></h1>
<div class="level1">

<p>
 Swift has come a leap forward from it&rsquo;s version 2 days where learning to use the plugin system was a confusing business unless you knew Swift&rsquo;s core inside-out.  In Version 3, things are clearer and simpler.  The entire basis of the plugin system is centered around the concept of event-driven programming.  Observers (Event Listeners) are plugged into Swift&rsquo;s core class.  Swift then dispatches Events (as objects) to these event listeners.
</p>

<p>
If you&rsquo;re familiar with the observer pattern, you should be able to pick this up fairly easily.  Otherwise, you probably want to have a read of this page first:
</p>

<p>
<a href="http://devzone.zend.com/node/view/id/5" class="urlextern" title="http://devzone.zend.com/node/view/id/5"  rel="nofollow">http://devzone.zend.com/node/view/id/5</a>
</p>

<p>
There are subtle differences with how the system has been implemented in PHP5 and PHP4.  Mostly these differences are the use of type checking in PHP5.... PHP4 is simply duck-typed.
</p>

<p>
There are a small number of events defined inside Swift.  Each event has a listener specific to the event: 
</p>
<table class="inline">
	<tr>
		<th class="leftalign"> Event              </th><th class="leftalign"> Listener              </th><th class="leftalign"> Listener Method                                  </th>
	</tr>
	<tr>
		<td class="leftalign"> ConnectEvent       </td><td class="leftalign"> ConnectListener       </td><td class="leftalign"> connectPerformed( <em>ConnectEvent</em> $e )          </td>
	</tr>
	<tr>
		<td class="leftalign"> DisconnectEvent    </td><td class="leftalign"> DisconnectListener    </td><td class="leftalign"> disconnectPerformed( <em>DisconnectEvent</em> $e )    </td>
	</tr>
	<tr>
		<td class="leftalign"> BeforeSendEvent    </td><td class="leftalign"> BeforeSendListener    </td><td class="leftalign"> beforeSendPerformed( <em>SendEvent</em> $e)     </td>
	</tr>
	<tr>
		<td class="leftalign"> SendEvent          </td><td class="leftalign"> SendListener          </td><td class="leftalign"> sendPerformed( <em>SendEvent</em> $e )                </td>
	</tr>
	<tr>
		<td> BeforeCommandEvent </td><td> BeforeCommandListener </td><td class="leftalign"> beforeCommandSent( <em>CommandEvent</em> $e )   </td>
	</tr>
	<tr>
		<td class="leftalign"> CommandEvent       </td><td class="leftalign"> CommandListener       </td><td class="leftalign"> commandSent( <em>CommandEvent</em> $e )               </td>
	</tr>
	<tr>
		<td class="leftalign"> ResponseEvent      </td><td class="leftalign"> ResponseListener      </td><td class="leftalign"> responseReceived( <em>ResponseEvent</em> $e )         </td>
	</tr>
</table>

<p>
 <strong>NOTE:</strong> I&rsquo;ve shortened the names for brevity on this page.  The class names are actually in the format Swift_Events_SendEvent and Swift_Events_SendListener.
</p>

<p>
Any single plugin implements a listener for at least one of those events.  A plugin can implement more than one listener if it needs to.
</p>

<p>
Each of the listeners listed above implements an interface with just one uniquely named method, we&rsquo;ll cover the actual methods used later in this documentation.  The methods receive the event object as an argument and this event object will always contain a getSwift() method which returns a reference to the instance of Swift it was fired from.  This gives you the ability to run methods in Swift from inside your plugin.  Additional methods such as getMessage() and getConnection() will be present in each of the events.
</p>

<p>
When an event is fired, the following sequence occurs:
</p>

<p>
Event generated &ndash;&gt; Listeners located &rarr; Listeners informed of event &rarr; Listeners carry out actions &rarr; Swift continues processing.
</p>

<p>
The next few pages in this wiki will discuss how to use each of the events.
</p>

</div>
