


<h1><a name="how_to_use_responselistener" id="how_to_use_responselistener">How to use ResponseListener</a></h1>
<div class="level1">

<p>

A plugin which implements Swift_Events_ResponseListener will be invoked every time Swift receives a new response from the connection.  This can come in useful if used in combination with a CommandListener because if you know what response codes to expect, you can “correct” problems by issuing the RSET command or whatever other action may be appropriate.  It probably helps to know a little about the <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> protocol before attempting such things however.
</p>

<p>
The plugin receives an instance of Swift_Events_ResponseEvent, which incidentally is the object which gets returned from command() inside Swift.  Therefore it would also be technically possible to “trick” Swift into believing that a different response was issued to what was actually issued.  Would that be useful?  To be honest, I don&#039;t know, I&#039;ve never had cause to do it ;)
</p>

<p>
Here&#039;s the interface:
</p>
<pre class="code php"><span class="co4">/**
 * Contains the list of methods a plugin requiring the use of a ResponseEvent must implement
 * @package Swift_Events
 * @author Chris Corbyn &lt;chris@w3style.co.uk&gt;
 */</span>
<span class="kw2">interface</span> Swift_Events_ResponseListener <span class="kw2">extends</span> Swift_Events_Listener
<span class="br0">&#123;</span>
	<span class="co4">/**
	 * Executes when Swift receives a response
	 * @param Swift_Events_ResponseEvent Information about the response
	 */</span>
	<span class="kw2">public</span> <span class="kw2">function</span> responseReceived<span class="br0">&#40;</span>Swift_Events_ResponseEvent <span class="re0">$e</span><span class="br0">&#41;</span>;
<span class="br0">&#125;</span></pre>
<p>
And here&#039;s an example of how you might kid Swift that it always receives the response codes it expects.  Note that we need to implement two interfaces here.
</p>
<pre class="code php"><span class="kw2">class</span> NeverArguesBackPlugin
    implements Swift_Events_BeforeCommandListener<span class="sy0">,</span> Swift_Events_ResponseListener
<span class="br0">&#123;</span>
    protected <span class="re0">$code</span>;
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> beforeCommandSent<span class="br0">&#40;</span>Swift_Events_CommandEvent <span class="re0">$e</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">code</span> <span class="sy0">=</span> <span class="re0">$e</span><span class="sy0">-&gt;</span><span class="me1">getCode</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> responseReceived<span class="br0">&#40;</span>Swift_Events_ResponseEvent <span class="re0">$e</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">code</span><span class="br0">&#41;</span>
        <span class="br0">&#123;</span>
            <span class="re0">$e</span><span class="sy0">-&gt;</span><span class="me1">setCode</span><span class="br0">&#40;</span><span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">code</span><span class="br0">&#41;</span>;
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>
<p>
Nasty indeed! :)
</p>

</div>
