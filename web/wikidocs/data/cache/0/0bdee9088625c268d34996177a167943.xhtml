


<h1><a name="how_to_use_commandlistener" id="how_to_use_commandlistener">How to use CommandListener</a></h1>
<div class="level1">

<p>

A plugin which implements the Swift_Events_CommandListener interface will be invoked whenever Swift has sent a command.  The CommandEvent object which is passed is the same object as the one a plugin implementing BeforeCommandListener would have already seen.  Therefore, any changes made before the command is issued will be also seen here after the command has been issued.  More often than not, BeforeCommandListener will be more useful than CommandListener.  We could use something like this to monitor the number of bytes being sent through Swift (outgoing bytes).
</p>

<p>
Here&#039;s the interface:
</p>
<pre class="code php"><span class="co4">/**
 * Contains the list of methods a plugin requiring the use of a CommandEvent must implement
 * @package Swift_Events
 * @author Chris Corbyn &lt;chris@w3style.co.uk&gt;
 */</span>
<span class="kw2">interface</span> Swift_Events_CommandListener <span class="kw2">extends</span> Swift_Events_Listener
<span class="br0">&#123;</span>
	<span class="co4">/**
	 * Executes when Swift sends a command
	 * @param Swift_Events_CommandEvent Information about the command sent
	 */</span>
	<span class="kw2">public</span> <span class="kw2">function</span> commandSent<span class="br0">&#40;</span>Swift_Events_CommandEvent <span class="re0">$e</span><span class="br0">&#41;</span>;
<span class="br0">&#125;</span></pre>
<p>
And here&#039;s a basic bandwidth monitor for outgoing bytes:
</p>
<pre class="code php"><span class="kw2">class</span> OutgoingBandwidthPlugin implements Swift_Events_CommandListener
<span class="br0">&#123;</span>
    protected <span class="re0">$bytes</span> <span class="sy0">=</span> <span class="nu19">0</span>;
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> commandSent<span class="br0">&#40;</span>Swift_Events_CommandEvent <span class="re0">$e</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="re0">$command</span> <span class="sy0">=</span> <span class="re0">$e</span><span class="sy0">-&gt;</span><span class="me1">getString</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;
        <span class="re0">$length</span> <span class="sy0">=</span> <a href="http://www.php.net/strlen"><span class="kw3">strlen</span></a><span class="br0">&#40;</span><span class="re0">$command</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">2</span>; <span class="co1">//Remember to add the CRLF</span>
        <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">addBytes</span><span class="br0">&#40;</span><span class="re0">$length</span><span class="br0">&#41;</span>;
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> addBytes<span class="br0">&#40;</span><span class="re0">$bytes</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">bytes</span> <span class="sy0">+=</span> <span class="re0">$bytes</span>;
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> setBytes<span class="br0">&#40;</span><span class="re0">$bytes</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">bytes</span> <span class="sy0">=</span> <span class="re0">$bytes</span>;
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">function</span> getBytes<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">return</span> <span class="re0">$this</span><span class="sy0">-&gt;</span><span class="me1">bytes</span>;
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>
</div>
