<?xml version="1.0" encoding="utf-8"?>
<!-- generator="FeedCreator 1.7.2-ppt DokuWiki" -->
<?xml-stylesheet href="http://swiftmailer.org/wikidocs/lib/exe/css.php?s=feed" type="text/css"?>
<rdf:RDF
    xmlns="http://purl.org/rss/1.0/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel rdf:about="http://swiftmailer.org/wikidocs/feed.php">
        <title>SwiftMailer Docs</title>
        <description></description>
        <link>http://swiftmailer.org/wikidocs/</link>
        <image rdf:resource="http://swiftmailer.org/wikidocs/lib/images/favicon.ico" />
       <dc:date>2010-03-27T06:51:15+01:00</dc:date>
        <items>
            <rdf:Seq>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/decorator?rev=1178574627&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugin_decorator?rev=1206526940&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/form2mail?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/form2mail?rev=1173709141&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/transports/smtp?rev=1211530884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_message?rev=1171474473&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/composition/basics?rev=1236058882&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/connections/smtp?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_connection_smtp?rev=1171479790&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/transports/sendmail?rev=1211530970&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/attachments?rev=1172337563&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/attachments?rev=1174579323&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/smtpauth?rev=1179869903&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/multirecipients?rev=1181248375&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/multirecipients?rev=1171450165&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/embedding_images?rev=1173265512&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/embedding_images?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/multipart_detail?rev=1172336876&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/composition/multipart?rev=1236058882&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/connections/sendmail?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_connection_sendmail?rev=1171452718&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/changes?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/connectevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_connectevent?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc_php4errors?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc/php4errors?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/connections/multi?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_connection_multi?rev=1171467003&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/basics?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_sendevent?rev=1171575299&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/sendevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending_basics?rev=1171481302&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tips_memory?rev=1172337419&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tips/memory?rev=1208812707&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_connection_rotator?rev=1171467632&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/connections/rotator?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc_caching?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/start?rev=1190361270&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc/caching?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/batch?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/batch?rev=1179511456&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/batch?rev=1171784105&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/start?rev=1239494836&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/fileembedder?rev=1179422330&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_disconnectevent?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/disconnectevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc/logging?rev=1187163154&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/composition/attachments?rev=1236058882&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/easy/start?rev=1171816577&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/easy/swift_connection_multi?rev=1236058880&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/message_attachments?rev=1171479065&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/bandwidthmonitor?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/easy/swift_connection_rotator?rev=1236058880&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugin_bandwidthmonitor?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/recipients?rev=1171448980&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/responseevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/composition/headers?rev=1236058882&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/recipients?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/easy/swift_connection_smtp?rev=1236058880&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_message_headers?rev=1171480864&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_responseevent?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/easy/swift_connection_sendmail?rev=1171816235&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/iterators?rev=1179422417&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins_loading?rev=1171481868&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/loading?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/exceptions?rev=1187127371&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/caching/overview?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/basic?rev=1171479116&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/examples/multipart?rev=1211589594&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/basic?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/beforecommandevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/verbose?rev=1175092542&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/beforesendevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_beforesendevent?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugin_verbose?rev=1174510700&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_beforecommandevent?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/exceptions?rev=1171479176&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/connections/nativemail?rev=1180799008&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/html?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/commandevent?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/examples/multiple_recipients?rev=1211436900&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/antiflood?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_intro?rev=1171575971&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/multiple?rev=1174580242&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev_commandevent?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugindev/intro?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending_multiple?rev=1171481391&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugin_antiflood?rev=1171482062&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/notes/discussion?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/multipart?rev=1171458349&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/html?rev=1176875586&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/failed_recipients?rev=1179411574&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/multipart?rev=1178577797&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/failed_recipients?rev=1171481557&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugin_throttler?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/throttler?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/examples/basics?rev=1211435116&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending_batch?rev=1171481485&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/examples/html?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc/commands?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/manipulating?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugin_manipulating?rev=1171482021&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc_commands?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_connection_nativemail?rev=1171479898&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/plugins/start?rev=1179422562&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tips/spam?rev=1202990081&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/examples/fluid_showoff?rev=1211437714&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/message_ids?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/message_priority?rev=1171481832&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/message_priority?rev=1197329843&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/installation/uploading?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/easy/swift_connection_nativemail?rev=1236058880&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/uploading?rev=1171583530&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/connections/start?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/notes/goals?rev=1193917869&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/swift_message_image?rev=1171481052&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/composition/images_embedded?rev=1236058882&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/bounce_address?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/bounce_address?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/misc/start?rev=1187127290&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tips_spam?rev=1171540378&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/extracting?rev=1171583499&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/installation/extracting?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/notes/ideas?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/faq/parseerror?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/testing?rev=1173264018&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/start?rev=1211596497&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/faq_parseerror?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/caching/array?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/installation/testing?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/notes/uml?rev=1202000840&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/faq/start?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4?rev=1211435465&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/composition/start?rev=1236058882&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/faq/unittests?rev=1236058883&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/contents?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/faq_unittests?rev=1236058881&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v4/caching/disk?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/tutorials/start?rev=1236058885&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/read_receipts?rev=1171481653&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/sending/read_receipts?rev=1236058884&amp;do=diff"/>
                <rdf:li rdf:resource="http://swiftmailer.org/wikidocs/v3/faq/permissiondenied?rev=1236058883&amp;do=diff"/>
            </rdf:Seq>
        </items>
    </channel>
    <image rdf:about="http://swiftmailer.org/wikidocs/lib/images/favicon.ico">
        <title>SwiftMailer Docs</title>
        <link>http://swiftmailer.org/wikidocs/</link>
        <url>http://swiftmailer.org/wikidocs/lib/images/favicon.ico</url>
    </image>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/decorator?rev=1178574627&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-07T23:50:27+01:00</dc:date>
        <title>Swift Message Decorator Plugin (For Customized Messages)</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/decorator?rev=1178574627&amp;do=diff</link>
        <description>Introduction to message decorating


Swift Mailer uses a caching system which operates on small units of the e-mail you compose.  If something's already been encoded/rendered and you try to encode/render it again swift reads the cache.  This offers a huge performance boost when sending the same message to many recipients.  Even once the message has been cached, you can change items such as the subject, body or transfer-encoding and Swift will use most of the message from the cache and re-render …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugin_decorator?rev=1206526940&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-03-26T11:22:20+01:00</dc:date>
        <title>Swift Message Decorator Plugin (For Customized Messages)</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugin_decorator?rev=1206526940&amp;do=diff</link>
        <description>Introduction to message decorating


Swift Mailer uses a caching system which operates on small units of the e-mail you compose.  If something's already been encoded/rendered and you try to encode/render it again swift reads the cache.  This offers a huge performance boost when sending the same message to many recipients.  Even once the message has been cached, you can change items such as the subject, body or transfer-encoding and Swift will use most of the message from the cache and re-render …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/form2mail?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Sending an e-mail from a form with Swift</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/form2mail?rev=1236058885&amp;do=diff</link>
        <description>Ok, so Swift isn't going to write the form and handle user input for you.  I'll assume you already know how to deal with forms in PHP.  If you don't, you might want to read here first: &lt;http://www.w3schools.com/php/php_forms.asp&gt;.  The only thing Swift will do is create the email for you and send it.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/form2mail?rev=1173709141&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-12T15:19:01+01:00</dc:date>
        <title>Sending an e-mail from a form with Swift</title>
        <link>http://swiftmailer.org/wikidocs/v3/form2mail?rev=1173709141&amp;do=diff</link>
        <description>Ok, so Swift isn't going to write the form and handle user input for you.  I'll assume you already know how to deal with forms in PHP.  If you don't, you might want to read here first: &lt;http://www.w3schools.com/php/php_forms.asp&gt;.  The only thing Swift will do is create the email for you and send it.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/transports/smtp?rev=1211530884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-23T10:21:24+01:00</dc:date>
        <title>SMTP Transport (Swift_SmtpTransport)</title>
        <link>http://swiftmailer.org/wikidocs/v4/transports/smtp?rev=1211530884&amp;do=diff</link>
        <description>SMTP Transport (Swift_SmtpTransport)

What is it for?


The SMTP Transport class (named Swift_SmtpTransport) is used when you want to send messages using an SMTP server.  Before you decide to use this Transport method you first need to know the credentials to connect to an SMTP server from your web host.  Most web hosts provide an SMTP server to use, others do not.  Some SMTP servers will require the use of a username and password before you can send.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_message?rev=1171474473&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T18:34:33+01:00</dc:date>
        <title>Basics of Swift_Message</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_message?rev=1171474473&amp;do=diff</link>
        <description>Synopsis: new Swift_Message([string subject [, mixed body [, string content-type [, string encoding [, string charset ]]]]])

Unlike other email libraries, Swift is fully Object-oriented.  Message composition could be bundled into the main Swift class by all means... but it's not.  The EasySwift class does that if you really want it.  Swift itself doesn't do anything to do with the creation of emails.  Instead, there's a subset of classes included to allow you to do that.  All of these classes s…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/composition/basics?rev=1236058882&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:22+01:00</dc:date>
        <title>Basics of Swift_Message</title>
        <link>http://swiftmailer.org/wikidocs/v3/composition/basics?rev=1236058882&amp;do=diff</link>
        <description>Synopsis: new Swift_Message([string subject [, mixed body [, string content-type [, string encoding [, string charset ]]]]])

Unlike other email libraries, Swift is fully Object-oriented.  Message composition could be bundled into the main Swift class by all means... but it's not.  The EasySwift class does that if you really want it.  Swift itself doesn't do anything to do with the creation of emails.  Instead, there's a subset of classes included to allow you to do that.  All of these classes s…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/connections/smtp?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Swift_Connection_SMTP</title>
        <link>http://swiftmailer.org/wikidocs/v3/connections/smtp?rev=1236058883&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_SMTP(string remote_host[, int remote_port [, int encryption_level]])

Getting connected to SMTP


The SMTP connection is probably the most heavily used connection, and almost certainly the most consistent and portable.  This connection opens up a socket with TCP and speaks “SMTP” to a remote SMTP server.  You need to have a SMTP server which is capable of relaying mail from the domain of your web server for this to work.  Some hosts provide a SMTP server for you as…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_connection_smtp?rev=1171479790&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:03:10+01:00</dc:date>
        <title>Swift_Connection_SMTP</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_connection_smtp?rev=1171479790&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_SMTP(string remote_host[, int remote_port [, int encryption_level]])

Getting connected to SMTP


The SMTP connection is probably the most heavily used connection, and almost certainly the most consistent and portable.  This connection opens up a socket with TCP and speaks “SMTP” to a remote SMTP server.  You need to have a SMTP server which is capable of relaying mail from the domain of your web server for this to work.  Some hosts provide a SMTP server for you as…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/transports/sendmail?rev=1211530970&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-23T10:22:50+01:00</dc:date>
        <title>SMTP Transport (Swift_SmtpTransport)</title>
        <link>http://swiftmailer.org/wikidocs/v4/transports/sendmail?rev=1211530970&amp;do=diff</link>
        <description>SMTP Transport (Swift_SmtpTransport)

What is it for?


The Sendmail Transport (named Swift_SendmailTransport) is for UNIX/Linux systems which use sendmail to send emails.  You will need to know where sendmail is installed in the server to use this class.  The typical locations for it are ”/sbin/sendmail” or ”/usr/sbin/sendmail”.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/attachments?rev=1172337563&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-24T18:19:23+01:00</dc:date>
        <title>Sending attachments</title>
        <link>http://swiftmailer.org/wikidocs/v3/attachments?rev=1172337563&amp;do=diff</link>
        <description>Luckily, attachments are much like MIME parts in a multipart message, expect they are not displayed by default and are encoded in a special way.  You attach files to an email using the attach() method in swift like you do when you add MIME parts, but you use the Swift_Message_Attachment class rather than the Swift_Message_Part class.  Swift then includes the message as an attachment, rather than a textual part of the email.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/attachments?rev=1174579323&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-22T17:02:03+01:00</dc:date>
        <title>Sending attachments</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/attachments?rev=1174579323&amp;do=diff</link>
        <description>Luckily, attachments are much like MIME parts in a multipart message, except they are not displayed by default and are encoded in a special way.  You attach files to an email using the attach() method in swift like you do when you add MIME parts, but you use the Swift_Message_Attachment class rather than the Swift_Message_Part class.  Swift then includes the message as an attachment, rather than a textual part of the email.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/smtpauth?rev=1179869903&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-22T23:38:23+01:00</dc:date>
        <title>SMTP Authentication</title>
        <link>http://swiftmailer.org/wikidocs/v3/smtpauth?rev=1179869903&amp;do=diff</link>
        <description>The SMTP connection in Swift provides a mechanism to use SMTP authentication against a remote server.  You use the setUsername() and setPassword() methods of the Swift_Connection_SMTP class to acheive this:


$smtp =&amp; new Swift_Connection_SMTP(&quot;smtp.host.tld&quot;);
$smtp-&gt;setUsername(&quot;foo&quot;);
$smtp-&gt;setPassword(&quot;bar&quot;);</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/multirecipients?rev=1181248375&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-07T22:32:55+01:00</dc:date>
        <title>Sending to multiple recipients</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/multirecipients?rev=1181248375&amp;do=diff</link>
        <description>In the previous tutorials you may have read, we've been providing recipient addresses using a string, or using the Swift_Address class.  However, Swift can send to Bcc recipients, Cc recipients and multiple To recipients.  For this, we use the Swift_RecipientList class.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/multirecipients?rev=1171450165&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T11:49:25+01:00</dc:date>
        <title>Sending to multiple recipients</title>
        <link>http://swiftmailer.org/wikidocs/v3/multirecipients?rev=1171450165&amp;do=diff</link>
        <description>In the previous tutorials you may have read, we've been providing recipient addresses using a string, or using the Swift_Address class.  However, Swift can send to Bcc recipients, Cc recipients and multiple To recipients.  For this, we use the Swift_RecipientList class.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/embedding_images?rev=1173265512&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-07T12:05:12+01:00</dc:date>
        <title>Embedding images in HTML E-mails</title>
        <link>http://swiftmailer.org/wikidocs/v3/embedding_images?rev=1173265512&amp;do=diff</link>
        <description>Once you have learned how to add attachments to an email with Swift, and how to send HTML emails with Swift, this will probably make sense.  Using HTML it's easy to add an &lt;img .. /&gt; tag to the message and link it to a remote image on your web server.  However, you can attach the image and link to the attachment directly.  This has it benefits, as well as its drawbacks (bandwidth!).  Many mail clients now block remote images by default, so embedding images could mean that your image is more like…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/embedding_images?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Embedding images in HTML E-mails</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/embedding_images?rev=1236058885&amp;do=diff</link>
        <description>Once you have learned how to add attachments to an email with Swift, and how to send HTML emails with Swift, this will probably make sense.  Using HTML it's easy to add an &lt;img .. /&gt; tag to the message and link it to a remote image on your web server.  However, you can attach the image and link to the attachment directly.  This has it benefits, as well as its drawbacks (bandwidth!).  Many mail clients now block remote images by default, so embedding images could mean that your image is more like…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/multipart_detail?rev=1172336876&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-24T18:07:56+01:00</dc:date>
        <title>Multi-Part Messages in Detail</title>
        <link>http://swiftmailer.org/wikidocs/v3/multipart_detail?rev=1172336876&amp;do=diff</link>
        <description>A potentially confusing preamble


Hopefully, I won't confuse people here... if I do, just ignore this entire rambling and go straight to the bottom of the page... It's not important, it's just useful to think about.

If we imagine representing an email as XML we'd have a document which looks something like this:</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/composition/multipart?rev=1236058882&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:22+01:00</dc:date>
        <title>Multi-Part Messages in Detail</title>
        <link>http://swiftmailer.org/wikidocs/v3/composition/multipart?rev=1236058882&amp;do=diff</link>
        <description>A potentially confusing preamble


Hopefully, I won't confuse people here... if I do, just ignore this entire rambling and go straight to the bottom of the page... It's not important, it's just useful to think about.

If we imagine representing an email as XML we'd have a document which looks something like this:</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/connections/sendmail?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Swift_Connection_Sendmail</title>
        <link>http://swiftmailer.org/wikidocs/v3/connections/sendmail?rev=1236058883&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Sendmail([string command])

Sendmail is a binary executable which runs on UNIX-like systems such as Linux and OS X.  The Swift_Connection_Sendmail class runs this executable in a standalone SMTP mode and sends emails through it.  If you have sendmail available to you this will be much faster than using the SMTP connection to a remote server, however, it does have one drawback - load balancing.  If you use sendmail then your server is processing Swift instructions, …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_connection_sendmail?rev=1171452718&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T12:31:58+01:00</dc:date>
        <title>Swift_Connection_Sendmail</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_connection_sendmail?rev=1171452718&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Sendmail([string command])

Sendmail is a binary executable which runs on UNIX-like systems such as Linux and OS X.  The Swift_Connection_Sendmail class runs this executable in a standalone SMTP mode and sends emails through it.  If you have sendmail available to you this will be much faster than using the SMTP connection to a remote server, however, it does have one drawback - load balancing.  If you use sendmail then your server is processing Swift instructions, …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/changes?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>What's changed in Version 4?</title>
        <link>http://swiftmailer.org/wikidocs/v4/changes?rev=1236058885&amp;do=diff</link>
        <description>What's changed in Version 4?

No more PHP 4


Version 4 introduces a number of massive changes.  Probably the most significant change to end-users is the fact that Swift Mailer Version 4 does not work with PHP 4 at all.  I have no plans to support PHP 4 so please do not email me and beg me to do so ;)</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/connectevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Writing a ConnectListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/connectevent?rev=1236058883&amp;do=diff</link>
        <description>As the name suggests, a ConnectListener will be notified every time Swift connects to the SMTP server or other MTA.  A plugin which implements the Swift_Events_ConnectListener interface will be passed an instance of Swift_Events_ConnectEvent when a connection is established.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_connectevent?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Writing a ConnectListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_connectevent?rev=1236058881&amp;do=diff</link>
        <description>As the name suggests, a ConnectListener will be notified every time Swift connects to the SMTP server or other MTA.  A plugin which implements the Swift_Events_ConnectListener interface will be passed an instance of Swift_Events_ConnectEvent when a connection is established.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc_php4errors?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>PHP4 error handling - The alternative to exceptions</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc_php4errors?rev=1236058881&amp;do=diff</link>
        <description>In PHP5, Swift throws exceptions in places, which is fairly standard practise.  Exceptions of course, can be caught and dealt with.  PHP4 however, does not support exceptions (the use of the try/catch construct).  I could have triggered errors everywhere blindly and had you use set_error_handler() from PHP, but that's too intrusive and can easily conflict with other things happening in your application.  Instead, Swift dispatches error object, much like an exception from PHP5, to an error manage…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc/php4errors?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>PHP4 error handling - The alternative to exceptions</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc/php4errors?rev=1236058883&amp;do=diff</link>
        <description>In PHP5, Swift throws exceptions in places, which is fairly standard practise.  Exceptions of course, can be caught and dealt with.  PHP4 however, does not support exceptions (the use of the try/catch construct).  I could have triggered errors everywhere blindly and had you use set_error_handler() from PHP, but that's too intrusive and can easily conflict with other things happening in your application.  Instead, Swift dispatches error object, much like an exception from PHP5, to an error manage…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/connections/multi?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Swift_Connection_Multi</title>
        <link>http://swiftmailer.org/wikidocs/v3/connections/multi?rev=1236058883&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Multi( [array connections] )

The Multi connection is a mechanism which contains within itself any number of connections you give it.  These connections can be of any combination of types (SMTP, Sendmail, NativeMail, other instances of Multi etc etc).  It's a way of providing redundancy in the event that a SMTP server is unavailable at the time of the request for example.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_connection_multi?rev=1171467003&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T16:30:03+01:00</dc:date>
        <title>Swift_Connection_Multi</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_connection_multi?rev=1171467003&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Multi( [array connections] )

The Multi connection is a mechanism which contains within itself any number of connections you give it.  These connections can be of any combination of types (SMTP, Sendmail, NativeMail, other instances of Multi etc etc).  It's a way of providing redundancy in the event that a SMTP server is unavailable at the time of the request for example.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/basics?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Sending a message to a recipient</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/basics?rev=1236058884&amp;do=diff</link>
        <description>Sending messages in Swift is extremely simple.  You call the send() method, which only has 3 parameters.  One is the message, one is the recipient, and the other is the sender.


$swift =&amp; new Swift(new Swift_Connection_SMTP(&quot;host.tld&quot;));

$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);

$sent = $swift-&gt;send($message, &quot;recipient@address.tld&quot;, &quot;sender@address.tld&quot;);
echo &quot;Sent to $sent recipients&quot;;</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_sendevent?rev=1171575299&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-15T22:34:59+01:00</dc:date>
        <title>How to use SendListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_sendevent?rev=1171575299&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_SendListener interface will be invoked every time Swift has sent a message to a recipient.  The event passed is of type Swift_Events_SendEvent, just like the BeforeSendListener.  In fact, the event you get passed is actually a reference to that same event you would have already seen if your plugin implements BeforeSendListener!  So if you're plugin implements both SendListener and BeforeSendListener, you could change the SendEvent before the message is …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/sendevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>How to use SendListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/sendevent?rev=1236058883&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_SendListener interface will be invoked every time Swift has sent a message to a recipient.  The event passed is of type Swift_Events_SendEvent, just like the BeforeSendListener.  In fact, the event you get passed is actually a reference to that same event you would have already seen if your plugin implements BeforeSendListener!  So if you're plugin implements both SendListener and BeforeSendListener, you could change the SendEvent before the message is …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending_basics?rev=1171481302&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:28:22+01:00</dc:date>
        <title>Sending a message to a recipient</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending_basics?rev=1171481302&amp;do=diff</link>
        <description>Sending messages in Swift is extremely simple.  You call the send() method, which only has 3 parameters.  One is the message, one is the recipient, and the other is the sender.


$swift =&amp; new Swift(new Swift_Connection_SMTP(&quot;host.tld&quot;));

$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);

$sent = $swift-&gt;send($message, &quot;recipient@address.tld&quot;, &quot;sender@address.tld&quot;);
echo &quot;Sent to $sent recipients&quot;;</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tips_memory?rev=1172337419&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-24T18:16:59+01:00</dc:date>
        <title>Keep memory down to a minimum</title>
        <link>http://swiftmailer.org/wikidocs/v3/tips_memory?rev=1172337419&amp;do=diff</link>
        <description>If you're sending out a large batch of emails (in the thousands of recipients) you probably need to think slightly more about your approach to delivering the emails.  In general, if you can send two emails in a loop using X amount of memory, you should only need a negligible amount more memory to send out ten thousand.  Obviously you need more time too!</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tips/memory?rev=1208812707&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-04-21T23:18:27+01:00</dc:date>
        <title>Keep memory down to a minimum</title>
        <link>http://swiftmailer.org/wikidocs/v3/tips/memory?rev=1208812707&amp;do=diff</link>
        <description>If you're sending out a large batch of emails (in the thousands of recipients) you probably need to think slightly more about your approach to delivering the emails.  In general, if you can send two emails in a loop using X amount of memory, you should only need a negligible amount more memory to send out ten thousand.  Obviously you need more time too!</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_connection_rotator?rev=1171467632&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T16:40:32+01:00</dc:date>
        <title>Swift_Connection_Rotator</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_connection_rotator?rev=1171467632&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Rotator( [array connections] )

Much like the Multi connection, the Rotator connection also provides redundancy.  However, in addition it also provides a fairly unintelligent way to load balance between connections.

You provide it with a collection of different connections (possibly including some other rotating ones if you're crazy enough to do so ;)) and it tries each one in turn until one works, the rest are marked as “dead” internally and will not be retried. …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/connections/rotator?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Swift_Connection_Rotator</title>
        <link>http://swiftmailer.org/wikidocs/v3/connections/rotator?rev=1236058883&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Rotator( [array connections] )

Much like the Multi connection, the Rotator connection also provides redundancy.  However, in addition it also provides a fairly unintelligent way to load balance between connections.

You provide it with a collection of different connections (possibly including some other rotating ones if you're crazy enough to do so ;)) and it tries each one in turn until one works, the rest are marked as “dead” internally and will not be retried. …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc_caching?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Swift's Runtime Cache</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc_caching?rev=1236058881&amp;do=diff</link>
        <description>Swift Mailer incorporates a runtime cache to help speed things up a lot.  Composing emails is a tough business.  You need to encode files, correct line endings, translate to formats laid out in the RFCs.  It's therefore easier if you can just do this once and once it's been done, re-use the results.  Swift caches various pieces of data (computed strings) on various different levels whilst it composes messages.  This is all handled by an abstracted caching layer.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/start?rev=1190361270&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-21T09:54:30+01:00</dc:date>
        <title>Swift Mailer 3</title>
        <link>http://swiftmailer.org/wikidocs/v3/start?rev=1190361270&amp;do=diff</link>
        <description>Swift Mailer 3


Version 3 is the latest release.  It offers many beneficial changes over Version 2.

Library API Reference

	*  PHP4 API Documentation
	*  PHP5 API Documentation

Tutorials

	*  Sending a basic email
	*  Sending a HTML email
	*  Sending a multipart email
	*  Personalizing recipient names
	*  Catching useful errors
	*  Sending attachments
	*  Embedding images in HTML emails
	*  Sending to multiple recipients and/or copying to recipients
	*  Sending a batch email without revealing…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc/caching?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Swift's Runtime Cache</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc/caching?rev=1236058883&amp;do=diff</link>
        <description>Swift Mailer incorporates a runtime cache to help speed things up a lot.  Composing emails is a tough business.  You need to encode files, correct line endings, translate to formats laid out in the RFCs.  It's therefore easier if you can just do this once and once it's been done, re-use the results.  Swift caches various pieces of data (computed strings) on various different levels whilst it composes messages.  This is all handled by an abstracted caching layer.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/batch?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Sending a batch email</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/batch?rev=1236058885&amp;do=diff</link>
        <description>If you try to deliver an email to more than one recipient by using the Swift_RecipientList class in combination with Swift's send() method, you need to be aware that all the recipients of the message will be able to see each other's addresses in their mail clients.  This is fine for social/work emails, but if you were sending something like a newsletter or a marketing campaign it wouldn't look great and could even land you in trouble for breach of data protection.  To avoid any such problems, yo…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/batch?rev=1179511456&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-18T20:04:16+01:00</dc:date>
        <title>Sending a batch email or newsletter</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/batch?rev=1179511456&amp;do=diff</link>
        <description>When you send out an email marketing campaign, newsletter or any other type of batch email you don't particularly want to reveal everybody's address to the recipients.  One nasty hack is to Bcc all the recipients and leave the To: field undisclosed.  However, Swift provides a method specially for the purpose of sending out batch emails.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/batch?rev=1171784105&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-18T08:35:05+01:00</dc:date>
        <title>Sending a batch email</title>
        <link>http://swiftmailer.org/wikidocs/v3/batch?rev=1171784105&amp;do=diff</link>
        <description>If you try to deliver an email to more than one recipient by using the Swift_RecipientList class in combination with Swift's send() method, you need to be aware that all the recipients of the message will be able to see each other's addresses in their mail clients.  This is fine for social/work emails, but if you were sending something like a newsletter or a marketing campaign it wouldn't look great and could even land you in trouble for breach of data protection.  To avoid any such problems, yo…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/start?rev=1239494836&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-04-12T02:07:16+01:00</dc:date>
        <title>Swift Mailer</title>
        <link>http://swiftmailer.org/wikidocs/start?rev=1239494836&amp;do=diff</link>
        <description>Swift Mailer


Version 3 is now deprecated.  Unless you absolutely cannot upgrade yet, please download version 4 and use the version 4 documentation instead.

Download Version 4: &lt;http://swiftmailer.org/download&gt; 

Documentation for Version 4: &lt;http://swiftmailer.org/docs&gt;</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/fileembedder?rev=1179422330&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-17T19:18:50+01:00</dc:date>
        <title>Swift Automatic File Embedding Plugin</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/fileembedder?rev=1179422330&amp;do=diff</link>
        <description>Although Swift provides tools to embed files (such as images) into your emails, the interface through which you do this may not be convenient if you have been sent an email from a source beyond your control, already containing references to images over the web.  The Swift_Plugin_FileEmbedder class scans over an email before it is sent and embeds images (and other files) according to a set of rules.  The most basic use of the class simply involves loading it.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_disconnectevent?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Writing a DisconnectListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_disconnectevent?rev=1236058881&amp;do=diff</link>
        <description>A DisconnectListener will be notified every time Swift disconnects from the SMTP server or local MTA.  A plugin which implements the Swift_Events_DisconnectListener interface will be passed an instance of Swift_Events_DisconnectEvent when a disconnection occurs.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/disconnectevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Writing a DisconnectListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/disconnectevent?rev=1236058883&amp;do=diff</link>
        <description>A DisconnectListener will be notified every time Swift disconnects from the SMTP server or local MTA.  A plugin which implements the Swift_Events_DisconnectListener interface will be passed an instance of Swift_Events_DisconnectEvent when a disconnection occurs.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc/logging?rev=1187163154&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-08-15T09:32:34+01:00</dc:date>
        <title>Swift's Logging System</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc/logging?rev=1187163154&amp;do=diff</link>
        <description>Swift's Logging System


This page applies to version 3.3 and higher only.  The interface for this feature was considerably different in earlier versions.

Swift contains a complete logging system with differing levels of reporting.  By default, this logging system is disabled for the sake of speed and memory, but if you're running into problems you may consider enabling it so you can find out what's going on.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/composition/attachments?rev=1236058882&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:22+01:00</dc:date>
        <title>Dealing with Attachments</title>
        <link>http://swiftmailer.org/wikidocs/v3/composition/attachments?rev=1236058882&amp;do=diff</link>
        <description>Synopsis: new Swift_Message_Attachment([mixed data [, string filename [, string content-type [, string encoding [, string disposition]]]]])

An attachment yet again, another MIME document.  It's special because it contains any format of data such as a PDF, a Zip file or an executable.  In order for SMTP to proccess such data it gets encoded into a format which looks like plain-text (such as Base64).</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/easy/start?rev=1171816577&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-18T17:36:17+01:00</dc:date>
        <title>EasySwift Documentation</title>
        <link>http://swiftmailer.org/wikidocs/easy/start?rev=1171816577&amp;do=diff</link>
        <description>Installation

Installation is the same as installing Swift Mailer Version 3 since EasySwift is provided with, and wrapped around Version 3.


	*  Extracting the archive
	*  Uploading to the server
	*  Running the included tests

Tutorials

The Connections

EasySwift uses the same connection classes as Swift.  It requires a connection to be given during instantiation.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/easy/swift_connection_multi?rev=1236058880&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:20+01:00</dc:date>
        <title>Swift_Connection_Multi</title>
        <link>http://swiftmailer.org/wikidocs/easy/swift_connection_multi?rev=1236058880&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Multi( [array connections] )

The Multi connection is a mechanism which contains within itself any number of connections you give it.  These connections can be of any combination of types (SMTP, Sendmail, NativeMail, other instances of Multi etc etc).  It's a way of providing redundancy in the event that a SMTP server is unavailable at the time of the request for example.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/message_attachments?rev=1171479065&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:51:05+01:00</dc:date>
        <title>Dealing with Attachments</title>
        <link>http://swiftmailer.org/wikidocs/v3/message_attachments?rev=1171479065&amp;do=diff</link>
        <description>Synopsis: new Swift_Message_Attachment([mixed data [, string filename [, string content-type [, string encoding [, string disposition]]]]])

An attachment yet again, another MIME document.  It's special because it contains any format of data such as a PDF, a Zip file or an executable.  In order for SMTP to proccess such data it gets encoded into a format which looks like plain-text (such as Base64).</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/bandwidthmonitor?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Swift Bandwidth Monitoring/Tracking Plugin</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/bandwidthmonitor?rev=1236058884&amp;do=diff</link>
        <description>Depending upon what you're doing, or shoud I say, the scale of what you're sending you may wish to keep track of how much bandwidth Swift is using.  This plugin measures the incoming and outgoing bandwidth through the connection.

NOTE: The figures are from Swift's point of view, not the server.  “Bytes in” refers to bytes from the SMTP server back into swift; “bytes out” refers to bytes sent from Swift to the SMTP server.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/easy/swift_connection_rotator?rev=1236058880&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:20+01:00</dc:date>
        <title>Swift_Connection_Rotator</title>
        <link>http://swiftmailer.org/wikidocs/easy/swift_connection_rotator?rev=1236058880&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Rotator( [array connections] )

Much like the Multi connection, the Rotator connection also provides redundancy.  However, in addition it also provides a fairly unintelligent way to load balance between connections.

You provide it with a collection of different connections (possibly including some other rotating ones if you're crazy enough to do so ;)) and it tries each one in turn until one works, the rest are marked as “dead” internally and will not be retried. …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugin_bandwidthmonitor?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Swift Bandwidth Monitoring/Tracking Plugin</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugin_bandwidthmonitor?rev=1236058881&amp;do=diff</link>
        <description>Depending upon what you're doing, or shoud I say, the scale of what you're sending you may wish to keep track of how much bandwidth Swift is using.  This plugin measures the incoming and outgoing bandwidth through the connection.

NOTE: The figures are from Swift's point of view, not the server.  “Bytes in” refers to bytes from the SMTP server back into swift; “bytes out” refers to bytes sent from Swift to the SMTP server.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/recipients?rev=1171448980&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T11:29:40+01:00</dc:date>
        <title>Personalizing recipient names</title>
        <link>http://swiftmailer.org/wikidocs/v3/recipients?rev=1171448980&amp;do=diff</link>
        <description>When you send an email with Swift you can just provide the address as a string.  However, if you want to send a personal name along with the address you will need to use the Swift_Address class*.  This class is simply making life easier for Swift to ensure addresses are given in the correct format when used in message headers and when sent to the SMTP server.  It's extremely basic and simply takes one or two arguments in the constructor.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/responseevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>How to use ResponseListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/responseevent?rev=1236058883&amp;do=diff</link>
        <description>A plugin which implements Swift_Events_ResponseListener will be invoked every time Swift receives a new response from the connection.  This can come in useful if used in combination with a CommandListener because if you know what response codes to expect, you can “correct” problems by issuing the RSET command or whatever other action may be appropriate.  It probably helps to know a little about the SMTP protocol before attempting such things however.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/composition/headers?rev=1236058882&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:22+01:00</dc:date>
        <title>Manipulating MIME Headers</title>
        <link>http://swiftmailer.org/wikidocs/v3/composition/headers?rev=1236058882&amp;do=diff</link>
        <description>Setting and getting headers


Each component of a message contains a headers property which is an instance of Swift_Message_Headers.  Such components include Swift_Message, Swift_Message_Part and Swift_Message_Attachment.

The headers contain vital information about the structure of that component.  Each component will have a different set of headers depending upon what the component does.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/recipients?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Personalizing recipient names</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/recipients?rev=1236058885&amp;do=diff</link>
        <description>When you send an email with Swift you can just provide the address as a string.  However, if you want to send a personal name along with the address you will need to use the Swift_Address class*.  This class is simply making life easier for Swift to ensure addresses are given in the correct format when used in message headers and when sent to the SMTP server.  It's extremely basic and simply takes one or two arguments in the constructor.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/easy/swift_connection_smtp?rev=1236058880&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:20+01:00</dc:date>
        <title>Swift_Connection_SMTP</title>
        <link>http://swiftmailer.org/wikidocs/easy/swift_connection_smtp?rev=1236058880&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_SMTP(string remote_host[, int remote_port [, int encryption_level]])

Getting connected to SMTP


The SMTP connection is probably the most heavily used connection, and almost certainly the most consistent and portable.  This connection opens up a socket with TCP and speaks “SMTP” to a remote SMTP server.  You need to have a SMTP server which is capable of relaying mail from the domain of your web server for this to work.  Some hosts provide a SMTP server for you as…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_message_headers?rev=1171480864&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:21:04+01:00</dc:date>
        <title>Manipulating MIME Headers</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_message_headers?rev=1171480864&amp;do=diff</link>
        <description>Setting and getting headers


Each component of a message contains a headers property which is an instance of Swift_Message_Headers.  Such components include Swift_Message, Swift_Message_Part and Swift_Message_Attachment.

The headers contain vital information about the structure of that component.  Each component will have a different set of headers depending upon what the component does.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_responseevent?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>How to use ResponseListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_responseevent?rev=1236058881&amp;do=diff</link>
        <description>A plugin which implements Swift_Events_ResponseListener will be invoked every time Swift receives a new response from the connection.  This can come in useful if used in combination with a CommandListener because if you know what response codes to expect, you can “correct” problems by issuing the RSET command or whatever other action may be appropriate.  It probably helps to know a little about the SMTP protocol before attempting such things however.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/easy/swift_connection_sendmail?rev=1171816235&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-18T17:30:35+01:00</dc:date>
        <title>Swift_Connection_Sendmail</title>
        <link>http://swiftmailer.org/wikidocs/easy/swift_connection_sendmail?rev=1171816235&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_Sendmail([string command])

Sendmail is a binary executable which runs on UNIX-like systems such as Linux and OS X.  The Swift_Connection_Sendmail class runs this executable in a standalone SMTP mode and sends emails through it.  If you have sendmail available to you this will be much faster than using the SMTP connection to a remote server, however, it does have one drawback - load balancing.  If you use sendmail then your server is processing Swift instructions, …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/iterators?rev=1179422417&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-17T19:20:17+01:00</dc:date>
        <title>Using iterators to provide lists</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/iterators?rev=1179422417&amp;do=diff</link>
        <description>As you have seen, you can make use of Swift_RecipientList to send a message to multiple recipients.  Up until now you've only seen the usage of addTo(), addCc() and addBcc().  You can completely by-pass these methods however.  Swift is provided with an iterator to loop over those addresses you have added and calling addTo() for example is simply pushing addresses onto an array.  By default Swift_RecipientList will provide an Array iterator so that the values added with addTo(), addCc() and addBc…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins_loading?rev=1171481868&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:37:48+01:00</dc:date>
        <title>Loading new plugins into Swift</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins_loading?rev=1171481868&amp;do=diff</link>
        <description>Plugins in Swift are nothing more than event listeners (a sort of observer).  If you download a plugin, or want to load one of the packaged ones you first need to include the file in your script using the “include” or “require” keywords.  You then use the attachPlugin() method in Swift to pass an instance of the plugin to Swift.  Swift quite simply sends messages (events) to the plugin at relevent times.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/loading?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Loading new plugins into Swift</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/loading?rev=1236058884&amp;do=diff</link>
        <description>Plugins in Swift are nothing more than event listeners (a sort of observer).  If you download a plugin, or want to load one of the packaged ones you first need to include the file in your script using the “include” or “require” keywords.  You then use the attachPlugin() method in Swift to pass an instance of the plugin to Swift.  Swift quite simply sends messages (events) to the plugin at relevent times.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/exceptions?rev=1187127371&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-08-14T23:36:11+01:00</dc:date>
        <title>Catching useful errors</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/exceptions?rev=1187127371&amp;do=diff</link>
        <description>THIS PAGE APPLIES TO PHP5 ONLY


Swift Mailer version 3 throws exceptions in PHP5.  These exceptions should ideally be caught so that you can recover from them if required.  It's not compulsory to catch exceptions but it is good practice and it does help.  The API documentation packaged in the “docs” folder indicates where exceptions are thrown.  The only time this should happen in practise, is if your mail server is not configured correctly or is unavailable, or if you try doing something illeg…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/caching/overview?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Caching Strategies - Overview</title>
        <link>http://swiftmailer.org/wikidocs/v4/caching/overview?rev=1236058885&amp;do=diff</link>
        <description>Caching Strategies - Overview


Generating compliant MIME data (i.e. the email itself) is thirsty work, especially for non-ascii character sets.  Swift Mailer caches data where it can so that when sending the same email to lot of recipients things run a little faster.  There are two caching strategies offered by default in Swift Mailer.  One uses a PHP array to hold cached data.  The other writes data to disk.  It would be easy to extend Swift to support a new cache type if you have a reason to …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/basic?rev=1171479116&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:51:56+01:00</dc:date>
        <title>Sending a basic email</title>
        <link>http://swiftmailer.org/wikidocs/v3/basic?rev=1171479116&amp;do=diff</link>
        <description>Sending an email with Swift Mailer is a simple process.  You basically create a new instance of Swift with a connection type of your choice, you then create a message and ask Swift to deliver it to one or more recipients.  Perhaps if you're not familiar with OOP this snippet may look a little daunting but it should hopefully soon become familiar to you and feel quite natural.  EasySwift, packaged inside the library when you download it, provides a wrapper which makes this even simpler - at the e…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/examples/multipart?rev=1211589594&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-24T02:39:54+01:00</dc:date>
        <title>Sending a Multipart Email</title>
        <link>http://swiftmailer.org/wikidocs/v4/examples/multipart?rev=1211589594&amp;do=diff</link>
        <description>Sending a Multipart Email


First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message, add some parts to it and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/basic?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Sending a basic email</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/basic?rev=1236058885&amp;do=diff</link>
        <description>Sending an email with Swift Mailer is a simple process.  You basically create a new instance of Swift with a connection type of your choice, you then create a message and ask Swift to deliver it to one or more recipients.  Perhaps if you're not familiar with OOP this snippet may look a little daunting but it should hopefully soon become familiar to you and feel quite natural.  EasySwift, packaged inside the library when you download it, provides a wrapper which makes this even simpler - at the e…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/beforecommandevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>How to use BeforeCommandListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/beforecommandevent?rev=1236058883&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_BeforeCommandListener interface will be invoked every time Swift is about to issue an SMTP command.  The plugin will have access to the command being executed and any changes made to the command inside the plugin will be executed at the time when the command would normally execute.  Plugins which implement either the CommandListener or BeforeCommandListener are most likely listening for those event by means of tracking the progress of sending an email r…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/verbose?rev=1175092542&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-28T16:35:42+01:00</dc:date>
        <title>Verbose Sending Plugin (Debug-use only)</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/verbose?rev=1175092542&amp;do=diff</link>
        <description>The verbose sending plugin dumps out green and red bars during the sending of batches in order to allow you to quickly identify recipients who are not going through the SMTP connection.  It's unlikely you'll need to use this plugin for anything other than debugging.  Usage is simple, all you have to do is load it into Swift along with the View class it uses (or one of your own).</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/beforesendevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>How to use BeforeSendListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/beforesendevent?rev=1236058883&amp;do=diff</link>
        <description>The two event listeners in Swift which are likely to be the most heavily implemented are SendListener and BeforeSendListener.  BeforeSendListener is run before the message gets sent.  You will know who the recipients are and what the message is at this stage, but Swift will not yet have sent the message so you can change recipients and/or modify the message and then it will be sent.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_beforesendevent?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>How to use BeforeSendListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_beforesendevent?rev=1236058881&amp;do=diff</link>
        <description>The two event listeners in Swift which are likely to be the most heavily implemented are SendListener and BeforeSendListener.  BeforeSendListener is run before the message gets sent.  You will know who the recipients are and what the message is at this stage, but Swift will not yet have sent the message so you can change recipients and/or modify the message and then it will be sent.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugin_verbose?rev=1174510700&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-21T21:58:20+01:00</dc:date>
        <title>Verbose Sending Plugin (Debug-use only)</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugin_verbose?rev=1174510700&amp;do=diff</link>
        <description>The verbose sending plugin dumps out green and red bars during the sending of batches in order to allow you to quickly identify recipients who are not going through the SMTP connection.  It's unlikely you'll need to use this plugin for anything other than debugging.  Usage is simple, all you have to do is load it into Swift along with the View class it uses (or one of your own).</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_beforecommandevent?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>How to use BeforeCommandListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_beforecommandevent?rev=1236058881&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_BeforeCommandListener interface will be invoked every time Swift is about to issue an SMTP command.  The plugin will have access to the command being executed and any changes made to the command inside the plugin will be executed at the time when the command would normally execute.  Plugins which implement either the CommandListener or BeforeCommandListener are most likely listening for those event by means of tracking the progress of sending an email r…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/exceptions?rev=1171479176&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T19:52:56+01:00</dc:date>
        <title>Catching useful errors</title>
        <link>http://swiftmailer.org/wikidocs/v3/exceptions?rev=1171479176&amp;do=diff</link>
        <description>THIS PAGE APPLIES TO PHP5 ONLY


Swift Mailer version 3 throws exceptions in PHP5.  These exceptions should ideally be caught so that you can recover from them if required.  It's not compulsory to catch exceptions but it is good practice and it does help.  The API documentation packaged in the “docs” folder indicates where exceptions are thrown.  The only time this should happen in practise, is if your mail server is not configured correctly or is unavailable, or if you try doing something illeg…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/connections/nativemail?rev=1180799008&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-02T17:43:28+01:00</dc:date>
        <title>Swift_Connection_NativeMail</title>
        <link>http://swiftmailer.org/wikidocs/v3/connections/nativemail?rev=1180799008&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_NativeMail( void )

This is probably the simplest of all the connections to get to grips with.  It uses PHP's mail() function.  It takes no constructor parameters and requires no configuration.

NOTE: Due to differences between mail() in Windows and mail() on UNIX-like systems there will be small inconsistencies between running this connection on Windows and Linux/OS X.  These are perfectly fine.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/html?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Sending a HTML E-Mail</title>
        <link>http://swiftmailer.org/wikidocs/v3/html?rev=1236058881&amp;do=diff</link>
        <description>Sending a HTML email with Swift is just as easy as sending a plain-text email.  You just need to tell the Message that's it's in HTML format and everything else is the same as if you were sending plain-text.  HTML has it's advantages in that it's easy to create a layout with images and styles, but not all mail clients will read it, and if you're not careful, you might be increasing the risk of being blocked as spam.  See How to (legitimately) minimize being seen as spam.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/commandevent?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>How to use CommandListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/commandevent?rev=1236058883&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_CommandListener interface will be invoked whenever Swift has sent a command.  The CommandEvent object which is passed is the same object as the one a plugin implementing BeforeCommandListener would have already seen.  Therefore, any changes made before the command is issued will be also seen here after the command has been issued.  More often than not, BeforeCommandListener will be more useful than CommandListener.  We could use something like this to m…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/examples/multiple_recipients?rev=1211436900&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-22T08:15:00+01:00</dc:date>
        <title>Sending to Several Recipients</title>
        <link>http://swiftmailer.org/wikidocs/v4/examples/multiple_recipients?rev=1211436900&amp;do=diff</link>
        <description>Sending to Several Recipients


This is much the same as sending a basic email.  You simply add more addresses to the array of setTo().

First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/antiflood?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Using the AntiFlood plugin</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/antiflood?rev=1236058884&amp;do=diff</link>
        <description>Synopsis: new Swift_Plugin_AntiFlood([int threshold [, int pause]])

The AntiFlood plugin is designed to help lessen the load on the HTTP server and the SMTP server.  It can also be used to send out very large batches of emails when the SMTP server has restrictions in place to limit the number of emails sent in one go.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_intro?rev=1171575971&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-15T22:46:11+01:00</dc:date>
        <title>An introduction to Swift's Plugin API</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_intro?rev=1171575971&amp;do=diff</link>
        <description>Swift has come a leap forward from it's version 2 days where learning to use the plugin system was a confusing business unless you knew Swift's core inside-out.  In Version 3, things are clearer and simpler.  The entire basis of the plugin system is centered around the concept of event-driven programming.  Observers (Event Listeners) are plugged into Swift's core class.  Swift then dispatches Events (as objects) to these event listeners.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/multiple?rev=1174580242&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-22T17:17:22+01:00</dc:date>
        <title>Sending to mulitple recipients</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/multiple?rev=1174580242&amp;do=diff</link>
        <description>Sending to multiple recipients, or including Cc and Bcc recipients is handled by passing an instance of Swift_RecipientList as the recipient parameter in send().

Swift_RecipientList() contains the methods addTo(), addCc() and addBcc() along with removeTo(), removeCc() etc.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev_commandevent?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>How to use CommandListener</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev_commandevent?rev=1236058881&amp;do=diff</link>
        <description>A plugin which implements the Swift_Events_CommandListener interface will be invoked whenever Swift has sent a command.  The CommandEvent object which is passed is the same object as the one a plugin implementing BeforeCommandListener would have already seen.  Therefore, any changes made before the command is issued will be also seen here after the command has been issued.  More often than not, BeforeCommandListener will be more useful than CommandListener.  We could use something like this to m…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugindev/intro?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>An introduction to Swift's Plugin API</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugindev/intro?rev=1236058883&amp;do=diff</link>
        <description>Swift has come a leap forward from it's version 2 days where learning to use the plugin system was a confusing business unless you knew Swift's core inside-out.  In Version 3, things are clearer and simpler.  The entire basis of the plugin system is centered around the concept of event-driven programming.  Observers (Event Listeners) are plugged into Swift's core class.  Swift then dispatches Events (as objects) to these event listeners.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending_multiple?rev=1171481391&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:29:51+01:00</dc:date>
        <title>Sending to mulitple recipients</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending_multiple?rev=1171481391&amp;do=diff</link>
        <description>Sending to multiple recipients, or including Cc and Bcc recipients is handled by passing an instance of Swift_RecipientList as the recipient parameter in send().

Swift_RecipientList() contains the methods addTo(), addCc() and addBcc() along with removeTo(), removeCc() etc.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugin_antiflood?rev=1171482062&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:41:02+01:00</dc:date>
        <title>Using the AntiFlood plugin</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugin_antiflood?rev=1171482062&amp;do=diff</link>
        <description>Synopsis: new Swift_Plugin_AntiFlood([int threshold [, int pause]])

The AntiFlood plugin is designed to help lessen the load on the HTTP server and the SMTP server.  It can also be used to send out very large batches of emails when the SMTP server has restrictions in place to limit the number of emails sent in one go.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/notes/discussion?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Version 4 Development Discussion</title>
        <link>http://swiftmailer.org/wikidocs/v4/notes/discussion?rev=1236058885&amp;do=diff</link>
        <description>A bit of a mish-mash of ramblings of the top of my head.

Components (subpackages)

	*  Encoders
	*  Mime Library
	*  Delivery Drivers/connections
	*  Authenticators
	*  Plugins
	*  Central Swift class (adaptor for the Delivery Drivers) (?)

Timeline


I'm not working to any deadlines on version 4.  It will be done right and it will be ready when it's ready.  It will definitely not be released before February 5th 2008, even if it is stable by then (see &lt;http://gophp5.org/&gt;)</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/multipart?rev=1171458349&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T14:05:49+01:00</dc:date>
        <title>Sending a multipart email</title>
        <link>http://swiftmailer.org/wikidocs/v3/multipart?rev=1171458349&amp;do=diff</link>
        <description>When you use a mail client such as Thunderbird to send an email in both HTML and Plain-text you are asking it to send a multipart message.  This uses a standard called MIME.  The essence of what's actually being sent is that rather than just sending one body of text and one set of headers, the email contains a main set of headers which identify it as having more than one part, and the body is replaced with two smaller documents, each with their own headers and bodies.  The mail client then decid…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/html?rev=1176875586&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-04-18T07:53:06+01:00</dc:date>
        <title>Sending a HTML E-Mail</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/html?rev=1176875586&amp;do=diff</link>
        <description>Sending a HTML email with Swift is just as easy as sending a plain-text email.  You just need to tell the Message that's it's in HTML format and everything else is the same as if you were sending plain-text.  HTML has it's advantages in that it's easy to create a layout with images and styles, but not all mail clients will read it, and if you're not careful, you might be increasing the risk of being blocked as spam.  See How to (legitimately) minimize being seen as spam.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/failed_recipients?rev=1179411574&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-17T16:19:34+01:00</dc:date>
        <title>Dealing with failed recipients</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/failed_recipients?rev=1179411574&amp;do=diff</link>
        <description>SMTP does occassionally reject recipient addresses due to malformity, domain conflicts, DNS issues and other problems.  If you want to track who got rejected you should enable Swift's logging facility so that these failures can be collected.  The failed addresses will be stored in $swift-&gt;log-&gt;getFailedRecipients() as an array.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/multipart?rev=1178577797&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-08T00:43:17+01:00</dc:date>
        <title>Sending a multipart email</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/multipart?rev=1178577797&amp;do=diff</link>
        <description>When you use a mail client such as Thunderbird to send an email in both HTML and Plain-text you are asking it to send a multipart message.  This uses a standard called MIME.  The essence of what's actually being sent is that rather than just sending one body of text and one set of headers, the email contains a main set of headers which identify it as having more than one part, and the body is replaced with two smaller documents, each with their own headers and bodies.  The mail client then decid…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/failed_recipients?rev=1171481557&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:32:37+01:00</dc:date>
        <title>Dealing with failed recipients</title>
        <link>http://swiftmailer.org/wikidocs/v3/failed_recipients?rev=1171481557&amp;do=diff</link>
        <description>SMTP does occassionally reject recipient addresses due to malformity, domain conflicts, DNS issues and other problems.  If you want to track who got rejected you should enable Swift's logging facility so that these failures can be collected.  The failed addresses will be stored in $swift-&gt;log-&gt;getFailedRecipients() as an array.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugin_throttler?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Throttler Plugin to restrict the speed</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugin_throttler?rev=1236058881&amp;do=diff</link>
        <description>If you want to run a batch send that's going to take a long time and don't want to hog the server's resources and/or bandwidth in the process perhaps this plugin is the solution.  Unlike the AntiFlood plugin, which offers a similar solution, the throttler works on the basis of restricting speed, not on the basis of minimizing the number of emails per-connection.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/throttler?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Throttler Plugin to restrict the speed</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/throttler?rev=1236058884&amp;do=diff</link>
        <description>If you want to run a batch send that's going to take a long time and don't want to hog the server's resources and/or bandwidth in the process perhaps this plugin is the solution.  Unlike the AntiFlood plugin, which offers a similar solution, the throttler works on the basis of restricting speed, not on the basis of minimizing the number of emails per-connection.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/examples/basics?rev=1211435116&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-22T07:45:16+01:00</dc:date>
        <title>Sending a Basic Email</title>
        <link>http://swiftmailer.org/wikidocs/v4/examples/basics?rev=1211435116&amp;do=diff</link>
        <description>Sending a Basic Email


First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending_batch?rev=1171481485&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:31:25+01:00</dc:date>
        <title>Sending a batch email or newsletter</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending_batch?rev=1171481485&amp;do=diff</link>
        <description>We you send out an email marketing campaign, newsletter or any other type of batch email you don't particularly want to reveal everybody's address to the recipients.  One nasty hack is to Bcc all the recipients and leave the To: field undisclosed.  However, Swift provides a method specially for the purpose of sending out batch emails.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/examples/html?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Sending a HTML Email</title>
        <link>http://swiftmailer.org/wikidocs/v4/examples/html?rev=1236058885&amp;do=diff</link>
        <description>Sending a HTML Email


First you need to include the “swift_required.php” file, then you create an instance of the Mailer using any of the Transports (probably Swift_SmtpTransport, Swift_SendmailTransport or Swift_MailTransport).  Then you create a a message, specifying “text/html” as a content type and send it with the Mailer.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc/commands?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Running SMTP Commands using Swift</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc/commands?rev=1236058883&amp;do=diff</link>
        <description>Swift is based around the SMTP protocol.  Even the NativeMail connection has been written to speak SMTP to Swift.  For this reason, it probably won't surprise you that there are mechanisms in place for running SMTP commands through Swift yourself.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/manipulating?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Working with plugins after loading</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/manipulating?rev=1236058884&amp;do=diff</link>
        <description>Plugins are held inside Swift by-reference and you can get a reference to that plugin yourself by using the getPlugin() method.  When you load a plugin into Swift you need to give it a name.  You use that name to retreive a reference to it.  This comes in particularly useful when you want to run methods in a plugin at runtime.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugin_manipulating?rev=1171482021&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:40:21+01:00</dc:date>
        <title>Working with plugins after loading</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugin_manipulating?rev=1171482021&amp;do=diff</link>
        <description>Plugins are held inside Swift by-reference and you can get a reference to that plugin yourself by using the getPlugin() method.  When you load a plugin into Swift you need to give it a name.  You use that name to retreive a reference to it.  This comes in particularly useful when you want to run methods in a plugin at runtime.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc_commands?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Running SMTP Commands using Swift</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc_commands?rev=1236058881&amp;do=diff</link>
        <description>Swift is based around the SMTP protocol.  Even the NativeMail connection has been written to speak SMTP to Swift.  For this reason, it probably won't surprise you that there are mechanisms in place for running SMTP commands through Swift yourself.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_connection_nativemail?rev=1171479898&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:04:58+01:00</dc:date>
        <title>Swift_Connection_NativeMail</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_connection_nativemail?rev=1171479898&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_NativeMail( void )

This is probably the simplest of all the connections to get to grips with.  It uses PHP's mail() function.  It takes no constructor parameters and requires no configuration.

NOTE: Due to differences between mail() in Windows and mail() on UNIX-like systems there will be small inconsistencies between running this connection on Windows and Linux/OS X.  These are perfectly fine.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/plugins/start?rev=1179422562&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-17T19:22:42+01:00</dc:date>
        <title>Using Plugins</title>
        <link>http://swiftmailer.org/wikidocs/v3/plugins/start?rev=1179422562&amp;do=diff</link>
        <description>Using Plugins

	*  Loading new plugins into Swift
	*  Working with plugins after loading
	*  Swift_Plugin_AntiFlood
	*  Swift_Plugin_Decorator
	*  Swift_Plugin_VerboseSending
	*  Swift_Plugin_Throttler
	*  Swift_Plugin_BandwidthMonitor
	*  Swift_Plugin_FileEmbedder</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tips/spam?rev=1202990081&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-02-14T12:54:41+01:00</dc:date>
        <title>How to (legitimately) minimize being seen as spam</title>
        <link>http://swiftmailer.org/wikidocs/v3/tips/spam?rev=1202990081&amp;do=diff</link>
        <description>This is a BIG topic and seemingly one that many people are quite patchy on.  I'll try to give you enough knowledge to make your own judgements and what you could do to minimize your risk.  You may finish up sad and disappointed by the end of this article though so don't build your hopes up that there's a quick-fix solution if you are being blocked as spam.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/examples/fluid_showoff?rev=1211437714&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-22T08:28:34+01:00</dc:date>
        <title>Just for Kicks!</title>
        <link>http://swiftmailer.org/wikidocs/v4/examples/fluid_showoff?rev=1211437714&amp;do=diff</link>
        <description>Just for Kicks!


Swift Mailer Version 4 is very streamlined and aims to make typing the code as pain-free as possible.  One statement is less painful to write than 5 statements right?  I really don't expect anybody to do this, but just to show off how streamlined Swift can be, here's sending a message with an attachment using a single statement.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/message_ids?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Working with Message-IDs</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/message_ids?rev=1236058884&amp;do=diff</link>
        <description>Emails can contain a unique ID known as a message ID.  As of Swift version 3.1.4, Swift will generate this ID for you on a per-send basis (i.e. when you send a message an ID is created for it).  If you want to get the message ID yourself then you should override what Swift does and call the generateId() method of Swift_Message:</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/message_priority?rev=1171481832&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:37:12+01:00</dc:date>
        <title>Changing the message priority</title>
        <link>http://swiftmailer.org/wikidocs/v3/message_priority?rev=1171481832&amp;do=diff</link>
        <description>The message priority does little more than flag the message in the recipients INBOX as being important or not.  To set the priority, you make a change to the message itself.  You can provide an integer ranging from 1 (High) to 5 (Low) to indicate the priority.  By default, no priority is indicated which equates to a priority of 3 (Normal).  The class constants used in the example below map to the relevant integer values of the priority.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/message_priority?rev=1197329843&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-12-11T00:37:23+01:00</dc:date>
        <title>Changing the message priority</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/message_priority?rev=1197329843&amp;do=diff</link>
        <description>The message priority does little more than flag the message in the recipients INBOX as being important or not.  To set the priority, you make a change to the message itself.  You can provide an integer ranging from 1 (High) to 5 (Low) to indicate the priority.  By default, no priority is indicated which equates to a priority of 3 (Normal).  The class constants used in the example below map to the relevant integer values of the priority.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/installation/uploading?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Uploading to the server</title>
        <link>http://swiftmailer.org/wikidocs/v3/installation/uploading?rev=1236058883&amp;do=diff</link>
        <description>Once the archive has been extracted you will have a new directory named something like
Swift-&lt;version&gt;

Inside this directory there are several files and folders.  You should read the README and INSTALL files before you do anything else.


  w3style:~/public_html/Swift-3.0-rc1 d11wtq$ ls -l
  total 80
  -rw-r--r--   1 d11wtq  d11wtq   1976 Dec 28 21:00 CHANGES
  -rw-r--r--   1 d11wtq  d11wtq   1351 Dec 28 21:00 INSTALL
  -rw-r--r--   1 d11wtq  d11wtq  24382 Dec 28 21:00 LICENSE
  -rw-r--r--   1 …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/easy/swift_connection_nativemail?rev=1236058880&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:20+01:00</dc:date>
        <title>Swift_Connection_NativeMail</title>
        <link>http://swiftmailer.org/wikidocs/easy/swift_connection_nativemail?rev=1236058880&amp;do=diff</link>
        <description>Synopsis: new Swift_Connection_NativeMail( void )

This is probably the simplest of all the connections to get to grips with.  It uses PHP's mail() function.  It takes no constructor parameters and requires no configuration.

NOTE: Due to differences between mail() in Windows and mail() on UNIX-like systems there will be small inconsistencies between running this connection on Windows and Linux/OS X.  These are perfectly fine.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/uploading?rev=1171583530&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-16T00:52:10+01:00</dc:date>
        <title>Uploading to the server</title>
        <link>http://swiftmailer.org/wikidocs/v3/uploading?rev=1171583530&amp;do=diff</link>
        <description>Once the archive has been extracted you will have a new directory named something like
Swift-&lt;version&gt;

Inside this directory there are several files and folders.  You should read the README and INSTALL files before you do anything else.


  w3style:~/public_html/Swift-3.0-rc1 d11wtq$ ls -l
  total 80
  -rw-r--r--   1 d11wtq  d11wtq   1976 Dec 28 21:00 CHANGES
  -rw-r--r--   1 d11wtq  d11wtq   1351 Dec 28 21:00 INSTALL
  -rw-r--r--   1 d11wtq  d11wtq  24382 Dec 28 21:00 LICENSE
  -rw-r--r--   1 …</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/connections/start?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>The Connections</title>
        <link>http://swiftmailer.org/wikidocs/v3/connections/start?rev=1236058883&amp;do=diff</link>
        <description>The Connections

	*   Swift_Connection_SMTP
	*  Swift_Connection_Sendmail
	*  Swift_Connection_NativeMail
	*  Swift_Connection_Multi
	*  Swift_Connection_Rotator
	*  SMTP Authentication</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/notes/goals?rev=1193917869&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-11-01T12:51:09+01:00</dc:date>
        <title>Development Goals</title>
        <link>http://swiftmailer.org/wikidocs/v4/notes/goals?rev=1193917869&amp;do=diff</link>
        <description>Version 4 will be the first release of Swift Mailer which will be developed for PHP 5.2 and later.  The development of version 4 will be taken at a slow and steady pace (no release date until at least February 5th 2008) with an extreme amount of focus put on cutting down coupling between classes in the library as far as possible.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/swift_message_image?rev=1171481052&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:24:12+01:00</dc:date>
        <title>Embedding images</title>
        <link>http://swiftmailer.org/wikidocs/v3/swift_message_image?rev=1171481052&amp;do=diff</link>
        <description>When you send a HTML format email you can of course include the &lt;img /&gt; tag.  Commonly, people will do something like:

&lt;img src=&quot;http://your-host.tld/images/foo.png&quot; alt=&quot;foo&quot; /&gt;

However, because this links to a remote image you may find that your recipient does not see the image as the mail client may block remote images by default.  If you'd prefer to send the image as part of the email you need to embed it.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/composition/images_embedded?rev=1236058882&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:22+01:00</dc:date>
        <title>Embedding images</title>
        <link>http://swiftmailer.org/wikidocs/v3/composition/images_embedded?rev=1236058882&amp;do=diff</link>
        <description>When you send a HTML format email you can of course include the &lt;img /&gt; tag.  Commonly, people will do something like:

&lt;img src=&quot;http://your-host.tld/images/foo.png&quot; alt=&quot;foo&quot; /&gt;

However, because this links to a remote image you may find that your recipient does not see the image as the mail client may block remote images by default.  If you'd prefer to send the image as part of the email you need to embed it.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/bounce_address?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Setting the Bounce detect, or Return-path address</title>
        <link>http://swiftmailer.org/wikidocs/v3/bounce_address?rev=1236058881&amp;do=diff</link>
        <description>When using SMTP, you don't always know if the message is going to reach the recipient.  If something goes wrong and you're really lucky you'll know about it at SMTP time if the server reports an error; if you're not so lucky, but not completely in the dark, you'll receive an email from a different server saying that something went wrong; and if you're completely unlucky, you'll just be left wondering why you never got a response from the recipient.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/bounce_address?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Setting the Bounce detect, or Return-path address</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/bounce_address?rev=1236058884&amp;do=diff</link>
        <description>When using SMTP, you don't always know if the message is going to reach the recipient.  If something goes wrong and you're really lucky you'll know about it at SMTP time if the server reports an error; if you're not so lucky, but not completely in the dark, you'll receive an email from a different server saying that something went wrong; and if you're completely unlucky, you'll just be left wondering why you never got a response from the recipient.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/misc/start?rev=1187127290&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-08-14T23:34:50+01:00</dc:date>
        <title>Miscellaneous</title>
        <link>http://swiftmailer.org/wikidocs/v3/misc/start?rev=1187127290&amp;do=diff</link>
        <description>Miscellaneous

	*  Swift's logging system... find out what's going on
	*  A little about Swift's internal caching system
	*  PHP4 error handling - the exception hackaround
	*  Runing SMTP commands using Swift</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tips_spam?rev=1171540378&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-15T12:52:58+01:00</dc:date>
        <title>How to (legitimately) minimize being seen as spam</title>
        <link>http://swiftmailer.org/wikidocs/v3/tips_spam?rev=1171540378&amp;do=diff</link>
        <description>This is a BIG topic and seemingly one that many people are quite patchy on.  I'll try to give you enough knowledge to make your own judgements and what you could do to minimize your risk.  You may finish up sad and disappointed by the end of this article though so don't build your hopes up that there's a quick-fix solution if you are being blocked as spam.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/extracting?rev=1171583499&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-16T00:51:39+01:00</dc:date>
        <title>Extracting the archive</title>
        <link>http://swiftmailer.org/wikidocs/v3/extracting?rev=1171583499&amp;do=diff</link>
        <description>Downloads of Swift Mailer come in two different archive formats.  There's a tarball (the one with .tar.gz) or a ZIP file (the one with .zip).  Both archives contain exactly the same files so it's up to you which one you download.

Extracting the archives on Linux or Mac OS X


Tarball:</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/installation/extracting?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Extracting the archive</title>
        <link>http://swiftmailer.org/wikidocs/v3/installation/extracting?rev=1236058883&amp;do=diff</link>
        <description>Downloads of Swift Mailer come in two different archive formats.  There's a tarball (the one with .tar.gz) or a ZIP file (the one with .zip).  Both archives contain exactly the same files so it's up to you which one you download.

Extracting the archives on Linux or Mac OS X


Tarball:</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/notes/ideas?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Send me your ideas and thoughts</title>
        <link>http://swiftmailer.org/wikidocs/v4/notes/ideas?rev=1236058885&amp;do=diff</link>
        <description>Come on guys, lets do this together, give me some input and let me know what's lacking in version 3, or if something stinks about my direction with version 4.

One thing though, don't ask for anything to do with receiving mail or tracking delivery once a message has been sent, that's a complete different subject which Swift has never been scoped towards.  Swift is an email creation and delivery library, not a complete email system ;)</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/faq/parseerror?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Are you getting Parse Errors?</title>
        <link>http://swiftmailer.org/wikidocs/v3/faq/parseerror?rev=1236058883&amp;do=diff</link>
        <description>If you are getting parse errors upon including Swift Mailer in your code, it's almost definitely because you have downloaded the wrong version.  There are two releases of Swift.  One is for PHP4 and the other is for PHP5.  If you try using the PHP5 version in PHP4 you WILL get parse errors.  Make sure you are using the appropriate version.  The filenames all have the PHP version they were made for in them.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/testing?rev=1173264018&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-07T11:40:18+01:00</dc:date>
        <title>Running the included tests</title>
        <link>http://swiftmailer.org/wikidocs/v3/testing?rev=1173264018&amp;do=diff</link>
        <description>Swift comes with a complete set of tests just to ensure everything works the way it's expect to.  There are three types of tests included with the library: Smoke Tests, Unit Tests and Benchmarks.  All of these are found in the “tests” directory.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/start?rev=1211596497&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-24T04:34:57+01:00</dc:date>
        <title>Swift Mailer Version 4</title>
        <link>http://swiftmailer.org/wikidocs/v4/start?rev=1211596497&amp;do=diff</link>
        <description>Swift Mailer Version 4


NOTE this documentation is a work in progress.

General Information

	*  What's changed in version 4?
	*  Server environment requirements
	*  Two editions, One project

Overview of the project structure

	*  Dependency Injection
	*  Required files
	*  Configurable preferences</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/faq_parseerror?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Are you getting Parse Errors?</title>
        <link>http://swiftmailer.org/wikidocs/v3/faq_parseerror?rev=1236058881&amp;do=diff</link>
        <description>If you are getting parse errors upon including Swift Mailer in your code, it's almost definitely because you have downloaded the wrong version.  There are two releases of Swift.  One is for PHP4 and the other is for PHP5.  If you try using the PHP5 version in PHP4 you WILL get parse errors.  Make sure you are using the appropriate version.  The filenames all have the PHP version they were made for in them.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/caching/array?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>The Array Cache</title>
        <link>http://swiftmailer.org/wikidocs/v4/caching/array?rev=1236058885&amp;do=diff</link>
        <description>The Array Cache


It's not advisable to use array caching if a writable directory exists on the filesystem (even /tmp).  However, the presence of a directory which PHP can write to is often not available.  Using the array cache will work on all systems without any specific cache settings.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/installation/testing?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Running the included tests</title>
        <link>http://swiftmailer.org/wikidocs/v3/installation/testing?rev=1236058883&amp;do=diff</link>
        <description>Swift comes with a complete set of tests just to ensure everything works the way it's expect to.  There are three types of tests included with the library: Smoke Tests, Unit Tests and Benchmarks.  All of these are found in the “tests” directory.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/notes/uml?rev=1202000840&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-02-03T02:07:20+01:00</dc:date>
        <title>UML Diagrams for Version 4</title>
        <link>http://swiftmailer.org/wikidocs/v4/notes/uml?rev=1202000840&amp;do=diff</link>
        <description>Here's an up-to-date collection of UML diagrams used in project planning for Version 4.  These diagrams are not to be assumed as final, they merely act as memory joggers in preparation for development of a library where TDD will be the main driving force.  Given that Swift is now reaching it's 4th major version, there's enough knowledge about what works and what doesn't in the API to be able to get it roughly solid.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/faq/start?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Frequently Asked Questions</title>
        <link>http://swiftmailer.org/wikidocs/v3/faq/start?rev=1236058883&amp;do=diff</link>
        <description>Frequently Asked Questions

	*  I get parse errors, or I get a blank page when I include Swift?
	*  The unit tests are exiting with a memory exhaustion error. Huh?</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4?rev=1211435465&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-22T07:51:05+01:00</dc:date>
        <title>Swift Mailer Version 4</title>
        <link>http://swiftmailer.org/wikidocs/v4?rev=1211435465&amp;do=diff</link>
        <description>Swift Mailer Version 4

General Information

	*  What's changed in version 4?
	*  Server environment requirements
	*  Two editions, One project

Overview of the project structure

	*  Dependency Injection
	*  Required files
	*  Configurable preferences</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/composition/start?rev=1236058882&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:22+01:00</dc:date>
        <title>Message Composition</title>
        <link>http://swiftmailer.org/wikidocs/v3/composition/start?rev=1236058882&amp;do=diff</link>
        <description>Message Composition

	*  Basics of the Swift_Message class
	*  Multi-Part messages in more detail
	*  Dealing with Attachments
	*  Manipulating MIME headers
	*  Embedding images
	*  Customizing Messages</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/faq/unittests?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>The Unit Tests are using too much Memory</title>
        <link>http://swiftmailer.org/wikidocs/v3/faq/unittests?rev=1236058883&amp;do=diff</link>
        <description>If you run the group tests, and you're unlucky you may be getting one of the following:


	*  A blank page
	*  Asked to download the php file
	*  A memory exhaustion error


This is due to the fact that the group tests are examining a lot of areas of Swift and in the process need to do things such as regexp over strings and create mock objects (dummy objects which act like the real thing).  This takes it toll on memory.  The tests have been split into 4 separate groups and the highest memory use…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/contents?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>Swift Version 3 Documentation</title>
        <link>http://swiftmailer.org/wikidocs/v3/contents?rev=1236058881&amp;do=diff</link>
        <description>Swift Version 3 Documentation</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/faq_unittests?rev=1236058881&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:21+01:00</dc:date>
        <title>The Unit Tests are using too much Memory</title>
        <link>http://swiftmailer.org/wikidocs/v3/faq_unittests?rev=1236058881&amp;do=diff</link>
        <description>If you run the group tests, and you're unlucky you may be getting one of the following:


	*  A blank page
	*  Asked to download the php file
	*  A memory exhaustion error


This is due to the fact that the group tests are examining a lot of areas of Swift and in the process need to do things such as regexp over strings and create mock objects (dummy objects which act like the real thing).  This takes it toll on memory.  The tests have been split into 4 separate groups and the highest memory use…</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v4/caching/disk?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>The Disk Cache</title>
        <link>http://swiftmailer.org/wikidocs/v4/caching/disk?rev=1236058885&amp;do=diff</link>
        <description>The Disk Cache


The Disk cache is enabled by default, provided sys_get_temp_dir() exists.  Using disk caching provides speed improvements when sending large attachments and it provides a consistent level of memory use (roughly 1.68 MiB).

To explicitly use disk caching place these lines anywhere before you send any messages.  There is no need to use this code in the same script multiple times; only call it once.</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/tutorials/start?rev=1236058885&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:25+01:00</dc:date>
        <title>Tutorials</title>
        <link>http://swiftmailer.org/wikidocs/v3/tutorials/start?rev=1236058885&amp;do=diff</link>
        <description>Tutorials

	*  Sending a basic email
	*  Sending a HTML email
	*  Sending a multipart email
	*  Personalizing recipient names
	*  Catching useful errors
	*  Sending attachments
	*  Embedding images in HTML emails
	*  Sending to multiple recipients and/or copying to recipients
	*  Sending a batch email without revealing all addresses
	*  Sending an email from a form with Swift
	*  How to customize messages for each recipient in a batch
	*  [TODO: A mass-maling tutorial]</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/read_receipts?rev=1171481653&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2007-02-14T20:34:13+01:00</dc:date>
        <title>Requesting a Read-Receipt</title>
        <link>http://swiftmailer.org/wikidocs/v3/read_receipts?rev=1171481653&amp;do=diff</link>
        <description>Read-Receipts are not very reliable since most emails clients will either prompt, or block them.  However, if you do desire to request a read-receipt you should set this in the message itself, before sending:


$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);
$message-&gt;requestReadReceipt(&quot;your@address.tld&quot;);</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/sending/read_receipts?rev=1236058884&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:24+01:00</dc:date>
        <title>Requesting a Read-Receipt</title>
        <link>http://swiftmailer.org/wikidocs/v3/sending/read_receipts?rev=1236058884&amp;do=diff</link>
        <description>Read-Receipts are not very reliable since most emails clients will either prompt, or block them.  However, if you do desire to request a read-receipt you should set this in the message itself, before sending:


$message =&amp; new Swift_Message(&quot;My subject&quot;, &quot;My body&quot;);
$message-&gt;requestReadReceipt(&quot;your@address.tld&quot;);</description>
    </item>
    <item rdf:about="http://swiftmailer.org/wikidocs/v3/faq/permissiondenied?rev=1236058883&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2009-03-03T06:41:23+01:00</dc:date>
        <title>Why do I get a &quot;Permission Denied&quot; error when I use the SMTP connection?</title>
        <link>http://swiftmailer.org/wikidocs/v3/faq/permissiondenied?rev=1236058883&amp;do=diff</link>
        <description>Why do I get a &quot;Permission Denied&quot; error when I use the SMTP connection?


This is more than likely die to a firewall rule that has been put in place by your hosting provider.  Though I have not verified this information I have also been informed that PhpSuExec can cuase problems establishing socket connections.</description>
    </item>
</rdf:RDF>
