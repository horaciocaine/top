


<h1><a name="smtp_authentication" id="smtp_authentication">SMTP Authentication</a></h1>
<div class="level1">

<p>
 The <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> connection in Swift provides a mechanism to use <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> authentication against a remote server.  You use the setUsername() and setPassword() methods of the Swift_Connection_<acronym title="Simple Mail Transfer Protocol">SMTP</acronym> class to acheive this:
</p>
<pre class="code php"><span class="re0">$smtp</span> =&amp; <span class="kw2">new</span> Swift_Connection_SMTP<span class="br0">&#40;</span><span class="st0">&quot;smtp.host.tld&quot;</span><span class="br0">&#41;</span>;
<span class="re0">$smtp</span>-&gt;<span class="me1">setUsername</span><span class="br0">&#40;</span><span class="st0">&quot;foo&quot;</span><span class="br0">&#41;</span>;
<span class="re0">$smtp</span>-&gt;<span class="me1">setPassword</span><span class="br0">&#40;</span><span class="st0">&quot;bar&quot;</span><span class="br0">&#41;</span>;</pre>
<p>
In order for the <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> connection to perform authentication, some &ldquo;Authenticator&rdquo; classes are used.  These are individual units of code which know how to perform some common authentication procedures over <acronym title="Simple Mail Transfer Protocol">SMTP</acronym>.  The procedures are &ldquo;LOGIN&rdquo;, &ldquo;PLAIN&rdquo; and &ldquo;CRAM-MD5&rdquo;.  These should be enough for almost anybody to get going.  The <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> connection will choose the correct one to use.  If you&rsquo;d like to provide a specific mechanism and prevent Swift from using any of the others you can load it yourself using the attachAuthenticator() method in Swift_Connection_<acronym title="Simple Mail Transfer Protocol">SMTP</acronym>.
</p>
<pre class="code php"><span class="kw1">require_once</span> <span class="st0">&quot;lib/Swift.php&quot;</span>;
<span class="kw1">require_once</span> <span class="st0">&quot;lib/Swift/Connection/SMTP.php&quot;</span>;
<span class="kw1">require_once</span> <span class="st0">&quot;lib/Swift/Authenticator/LOGIN.php&quot;</span>;
&nbsp;
<span class="re0">$conn</span> =&amp; <span class="kw2">new</span> Swift_Connection_SMTP<span class="br0">&#40;</span><span class="st0">&quot;smtp.host.tld&quot;</span><span class="br0">&#41;</span>;
<span class="re0">$conn</span>-&gt;<span class="me1">attachAuthenticator</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Authenticator_LOGIN<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
&nbsp;
<span class="re0">$swift</span> =&amp; <span class="kw2">new</span> Swift<span class="br0">&#40;</span><span class="re0">$conn</span><span class="br0">&#41;</span>;</pre>
<p>
However, if you need a different type of authentication mechanism, and you know how it works, you can write your own using <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> commands.
</p>

<p>
The authenticator must conform to the following interface, which can be found in the Authenticator.php file:
</p>
<pre class="code php"><span class="coMULTI">/**
 * Swift Authenticator Interface
 * Lists the methods all authenticators must implement
 * @package Swift_Authenticator
 * @author Chris Corbyn &lt;chris@w3style.co.uk&gt;
 */</span>
<span class="kw2">interface</span> Swift_Authenticator
<span class="br0">&#123;</span>
	<span class="coMULTI">/**
	 * Try to authenticate using the username and password
	 * Returns false on failure
	 * @param string The username
	 * @param string The password
	 * @param Swift The instance of Swift this authenticator is used in
	 * @return boolean
	 */</span>
	<span class="kw2">public</span> <span class="kw2">function</span> isAuthenticated<span class="br0">&#40;</span><span class="re0">$username</span>, <span class="re0">$password</span>, Swift <span class="re0">$instance</span><span class="br0">&#41;</span>;
	<span class="coMULTI">/**
	 * Return the name of the AUTH extension this is for
	 * @return string
	 */</span>
	<span class="kw2">public</span> <span class="kw2">function</span> getAuthExtensionName<span class="br0">&#40;</span><span class="br0">&#41;</span>;
<span class="br0">&#125;</span></pre>
<p>
getAuthExtensionName() should return the case senSiTIVe string which corresponds to the name of the authentication mechanism in <acronym title="Simple Mail Transfer Protocol">SMTP</acronym>.  For example, for CRAM-MD5 authentication, your authenticator&rsquo;s getAuthExtensionName() method would return &ldquo;CRAM-MD5&rdquo;.
</p>

<p>
isAuthenticated() will contain any logic needed to perform the authentication.  The currect instance of Swift is provided so that you can call it&rsquo;s command() method when performing authentication.
</p>

</div>
<!-- SECTION "SMTP Authentication" [1-2595] -->
<h2><a name="how_to_get_pop_before_smtp_working" id="how_to_get_pop_before_smtp_working">How to get Pop Before SMTP Working</a></h2>
<div class="level2">

<p>
 Swift does support Pop Before <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> as a method of authentication, however, I&rsquo;ll be the first to admit it&rsquo;s not the friendliest authenticator to get working in Swift.  Here&rsquo;s how you do it.  Basically, the complication arises from the fact <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> servers do not advertise the fact they offer Pop Before <acronym title="Simple Mail Transfer Protocol">SMTP</acronym> authentication so Swift can&rsquo;t load the class in itself.  There&rsquo;s some oddness with the way I&rsquo;ve named the class file here in order to prevent auto-loading, I do apologise ;)
</p>
<pre class="code php"><span class="kw2">&lt;?php</span>
&nbsp;
<span class="kw1">require_once</span> <span class="st0">&quot;lib/Swift.php&quot;</span>;
<span class="kw1">require_once</span> <span class="st0">&quot;lib/Swift/Connection/SMTP.php&quot;</span>;
&nbsp;
<span class="co1">//Apologies for the filename, it's to stop Swift auto-loading it</span>
<span class="kw1">require_once</span> <span class="st0">&quot;lib/Swift/Authenticator/$PopB4Smtp$.php&quot;</span>;
&nbsp;
<span class="re0">$smtp</span> =&amp; <span class="kw2">new</span> Swift_Connection_SMTP<span class="br0">&#40;</span><span class="st0">&quot;smtp.host.tld&quot;</span><span class="br0">&#41;</span>;
&nbsp;
<span class="co1">//Load the PopB4Smtp authenticator with the pop3 hostname</span>
<span class="re0">$smtp</span>-&gt;<span class="me1">attachAuthenticator</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Authenticator_PopB4Smtp<span class="br0">&#40;</span><span class="st0">&quot;pop.host.tld&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
&nbsp;
<span class="co1">//Continue like normal</span>
<span class="re0">$smtp</span>-&gt;<span class="me1">setUsername</span><span class="br0">&#40;</span><span class="st0">&quot;your_pop3_username&quot;</span><span class="br0">&#41;</span>;
<span class="re0">$smtp</span>-&gt;<span class="me1">setPassword</span><span class="br0">&#40;</span><span class="st0">&quot;your_pop3_password&quot;</span><span class="br0">&#41;</span>;
&nbsp;
<span class="re0">$swift</span> =&amp; <span class="kw2">new</span> Swift<span class="br0">&#40;</span><span class="re0">$smtp</span><span class="br0">&#41;</span>;
&nbsp;
<span class="co1">//and continue....</span></pre>
</div>
<!-- SECTION "How to get Pop Before SMTP Working" [2596-] -->