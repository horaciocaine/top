a:163:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1;}i:3;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:-1;i:1;i:0;i:2;i:1;i:3;s:0:"";}i:2;i:1;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"Sending a batch email or newsletter";i:1;i:1;i:2;i:1;}i:2;i:1;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:51;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"When you send out an email marketing campaign, newsletter or any other type of batch email you don";}i:2;i:52;}i:9;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:150;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"t particularly want to reveal everybody";}i:2;i:151;}i:11;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:190;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"s address to the recipients.  One nasty hack is to Bcc all the recipients and leave the ";}i:2;i:191;}i:13;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:279;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"To:";}i:2;i:281;}i:15;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:284;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:" field undisclosed.  However, Swift provides a method specially for the purpose of sending out batch emails.";}i:2;i:286;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:394;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:394;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"batchSend() has exactly the same semantics as send(), except it will ignore any Cc or Bcc recipients and just send to the ";}i:2;i:396;}i:20;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:518;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"To:";}i:2;i:520;}i:22;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:523;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:" addresses.  When it does this, it adjusts the headers of the email for each recipient so that they only see their own address and hence, it looks a lot more authentic and professional.";}i:2;i:525;}i:24;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:710;}i:25;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:394:"
$swift =& new Swift(new Swift_Connection_SMTP("host.tld"));

$message =& new Swift_Message("Our newsletter", "Some news");

$recipients =& new Swift_RecipientList();
$recipients->addTo("recipient1@address.tld", "Recipient 1");
$recipients->addTo("recipient2@address.tld", "Another recipient");

$swift->batchSend($message, $recipients, new Swift_Address("company@domain.tld", "Our Company"));
";i:1;s:3:"php";}i:2;i:717;}i:26;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1123;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"This does use a little more bandwidth and take a little longer since Swift needs to send a slightly different message to each recipient.  However, it is still pretty fast!";}i:2;i:1125;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1296;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1296;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"The batchSend() approach to delivering mail actually handles errors internally, possibly restarting the ";}i:2;i:1298;}i:31;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"SMTP";}i:2;i:1402;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:254:" connection if network issues arise for example.  You should be aware of this masking of errors in the case you are experiencing issues.  If you are experiencing issues and suspect errors are being masked from you, you can dump a log of what is going on.";}i:2;i:1406;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1660;}i:34;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1660;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"[TODO: Write the logging section]";}i:2;i:1662;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1695;}i:37;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1698;}i:38;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:1;i:1;i:1697;i:2;i:1;i:3;s:35:"Sending a batch email or newsletter";}i:2;i:1698;}i:39;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Using the BatchMailer component";i:1;i:2;i:2;i:1698;}i:2;i:1698;}i:40;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1698;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1741;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1742;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"Although you can use $swift";}i:2;i:1743;}i:44;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:1770;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"batchSend() and still be a happy bunny, you gain some flexibility if you as a different class.  $swift";}i:2;i:1772;}i:46;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:1874;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"batchSend() is a lightweight, basic wrapper around another class called ";}i:2;i:1876;}i:48;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:1948;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Swift_BatchMailer";}i:2;i:1950;}i:50;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:1967;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1969;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1970;}i:53;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1970;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"To do perform this same basic task with the BatchMailer yourself you would quite literally substitute this line:";}i:2;i:1972;}i:55;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2084;}i:56;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:50:"
$swift->batchSend($message, $recipients, $from);
";i:1;s:3:"php";}i:2;i:2091;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2153;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"With these lines:";}i:2;i:2155;}i:59;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2172;}i:60;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:86:"
$batch =& new Swift_BatchMailer($swift);
$batch->send($message, $recipients, $from);
";i:1;s:3:"php";}i:2;i:2179;}i:61;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2277;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:275:"The BatchMailer class contains some batch-mailing specific methods to aid you in your heavy duty sending work.  Error masking/handling was mentioned in the above section, such as in the case where the network connection dies briefly.  There are other useful features however.";}i:2;i:2279;}i:63;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2554;}i:64;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2557;}i:65;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:1698;i:1;i:2556;i:2;i:2;i:3;s:31:"Using the BatchMailer component";}i:2;i:2557;}i:66;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Setting the maximum retries";i:1;i:3;i:2;i:2557;}i:2;i:2557;}i:67;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2557;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2594;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2595;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"For an individual address, the BatchMailer will attempt no more than twice to send an email to it by default.  It";}i:2;i:2596;}i:71;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:2709;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"s strongly recommended you keep this behaviour, but if you";}i:2;i:2710;}i:73;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:2768;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"d like to change the number of retries you can call $batch";}i:2;i:2769;}i:75;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:2827;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"setMaxTries($n) where $n is the total number of attempts.";}i:2;i:2829;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2886;}i:78;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2886;}i:79;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2888;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"NOTE:";}i:2;i:2890;}i:81;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2895;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" The number passed is the number of total attempts.  If you want 1 retry, this equates to 2 total attempts, not 1.";}i:2;i:2897;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3011;}i:84;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:25:"
$batch->setMaxTries(2);
";i:1;s:3:"php";}i:2;i:3018;}i:85;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3058;}i:86;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:2557;i:1;i:3057;i:2;i:3;i:3;s:27:"Setting the maximum retries";}i:2;i:3058;}i:87;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:48:"Setting the maximum successive failure allowance";i:1;i:3;i:2;i:3058;}i:2;i:3058;}i:88;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3058;}i:89;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3116;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3117;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"The BatchMailer component will keep sending even if errors occur in the transmission of ";}i:2;i:3118;}i:92;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"SMTP";}i:2;i:3206;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:390:" instructions.  It detects errors in the transmission (relatively common under high loads) and catches them, restarting the connection and continuing with the batch.  If transmission keeps throwing errors, the BatchMailer will by default just keep retrying to connection until the end of the batch is reached.  Obviously this could be extremely undesirable with very large batches and there";}i:2;i:3210;}i:94;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:3600;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:"s a good chance that after say, 10 successive failures without any success thing will likely not work at all.  You can limit the number of successive failures by calling $batch";}i:2;i:3601;}i:96;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:3777;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"setMaxSuccessiveFailures($n).";}i:2;i:3779;}i:98;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3808;}i:99;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:38:"
$batch->setMaxSuccessiveFailures(3);
";i:1;s:3:"php";}i:2;i:3815;}i:100;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3869;}i:101;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:3058;i:1;i:3868;i:2;i:3;i:3;s:48:"Setting the maximum successive failure allowance";}i:2;i:3869;}i:102;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Pausing on errors";i:1;i:3;i:2;i:3869;}i:2;i:3869;}i:103;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3869;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3896;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:3897;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"Errors often occur when the network is under heavy load.  The BatchMailer does deal with these but because it";}i:2;i:3898;}i:107;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:4007;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"s possible your server, the network, or the remote server is under load in the event of an error you may wish to wait a few seconds before picking the batch back up again.  This is easily configured with $batch";}i:2;i:4008;}i:109;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:4218;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"setSleepTime($t) where $t is the number of seconds to pause for.  It";}i:2;i:4220;}i:111;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:4288;}i:112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"s a simple sleep() call.";}i:2;i:4289;}i:113;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4313;}i:114;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:69:"
$batch->setSleepTime(10); //Sleep for 10 seconds if an error occurs
";i:1;s:3:"php";}i:2;i:4320;}i:115;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4403;}i:116;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:3869;i:1;i:4402;i:2;i:3;i:3;s:17:"Pausing on errors";}i:2;i:4403;}i:117;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"Checking which addresses didn't deliver";i:1;i:3;i:2;i:4403;}i:2;i:4403;}i:118;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4403;}i:119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4452;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4453;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"If you";}i:2;i:4454;}i:122;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:4460;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"re sending out a large batch (even just more than 100 addresses) it";}i:2;i:4461;}i:124;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:4528;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"s highly unlikely that your ";}i:2;i:4529;}i:126;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"SMTP";}i:2;i:4557;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" server is going to successfully accept every single recipient.  That";}i:2;i:4561;}i:128;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:4630;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"s fine, even under normal conditions (without batch sending) Swift will handle these errors.  You will probably want to know who failed however.  After you have sent a batch you can call $batch";}i:2;i:4631;}i:130;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:4824;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"getFailedRecipients() to get an array of those addresses to which Swift did not send a message.  This method returns an array containing just the address (no name) of the failed recipients.";}i:2;i:4826;}i:132;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5015;}i:133;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:166:"
$num_sent = $batch->send($message, $recipients, $sender);
print_r($batch->getFailedRecipients());

/*
Array (
  0 => 'joe@bloggs.tld',
  1 => 'user@domain.tld'
)
*/
";i:1;s:3:"php";}i:2;i:5022;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5200;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"If you are sending out more than one batch with the same instance of the BatchMailer you";}i:2;i:5202;}i:136;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:5290;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"ll probably want to clear out this list of failures once you";}i:2;i:5291;}i:138;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:5351;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"ve read from it.";}i:2;i:5352;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5368;}i:141;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:34:"
$batch->flushFailedRecipients();
";i:1;s:3:"php";}i:2;i:5375;}i:142;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5424;}i:143;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:4403;i:1;i:5423;i:2;i:3;i:3;s:39:"Checking which addresses didn't deliver";}i:2;i:5424;}i:144;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"Using custom list iterators";i:1;i:2;i:2;i:5424;}i:2;i:5424;}i:145;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5424;}i:146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5463;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5464;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"I sometimes wonder if I";}i:2;i:5465;}i:149;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:5488;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"ll ever stop refactoring Swift! ;)";}i:2;i:5489;}i:151;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5523;}i:152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5523;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:488:"When you send a batch you use an instance of Swift_RecipientList to provide your recipients.  Internally, the BatchMailer does not read directly from your list, but rather the list provides an iterator.  The default implementation is that of iterating over an array in an object-oriented sense.  For large batch sizes this may seem a bit wasteful having to pre-load the array.  Luckily you can use a different iterator such as the MySQLResult iterator, or you can even write your own.  It";}i:2;i:5525;}i:154;a:3:{i:0;s:18:"singlequoteclosing";i:1;a:0:{}i:2;i:6013;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"s beyond the scope of this page to discuss the ins and outs of the iterators here but you should take a read of ";}i:2;i:6014;}i:156;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:20:"v3:sending:iterators";i:1;N;}i:2;i:6126;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:6150;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6151;}i:159;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6151;}i:160;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6151;}i:161;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:5424;i:1;i:0;i:2;i:2;i:3;s:27:"Using custom list iterators";}i:2;i:6151;}i:162;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:6151;}}