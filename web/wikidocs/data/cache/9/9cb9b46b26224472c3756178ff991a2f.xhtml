<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="level1"><div class="li"><span class="li"><a href="#multi-part_messages_in_detail" class="toc">Multi-Part Messages in Detail</a></span></div>
<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="#a_potentially_confusing_preamble" class="toc">A potentially confusing preamble</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#multipart_and_mime_in_practice" class="toc">Multipart and MIME in practice</a></span></div></li></ul>
</li></ul>
</div>
</div>



<h1><a name="multi-part_messages_in_detail" id="multi-part_messages_in_detail">Multi-Part Messages in Detail</a></h1>
<div class="level1">

</div>
<!-- SECTION "Multi-Part Messages in Detail" [1-45] -->
<h2><a name="a_potentially_confusing_preamble" id="a_potentially_confusing_preamble">A potentially confusing preamble</a></h2>
<div class="level2">

<p>
 Hopefully, I won&rsquo;t confuse people here... if I do, just ignore this entire rambling and go straight to the bottom of the page... It&rsquo;s not important, it&rsquo;s just useful to think about.
</p>

<p>
If we imagine representing an email as <acronym title="Extensible Markup Language">XML</acronym> we&rsquo;d have a document which looks something like this:
</p>
<pre class="code xml"><span class="sc3"><span class="re1">&lt;email<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;headers<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Content-Type&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;text/plain&quot;</span> <span class="re2">/&gt;</span></span>
        <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Subject&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;My subject&quot;</span> <span class="re2">/&gt;</span></span>
    <span class="sc3"><span class="re1">&lt;/headers<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;body<span class="re2">&gt;</span></span></span>
        This is my message body
    <span class="sc3"><span class="re1">&lt;/body<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/email<span class="re2">&gt;</span></span></span></pre>
<p>
We have the email, a block of headers (in which there are many individual headers) and a body containing the bit you see.
</p>

<p>
Now, following the same concept, we can replace what&rsquo;s in the <code>&lt;body&gt;</code> with another document, which will be parsed and displayed like a normal email.
</p>
<pre class="code xml"><span class="sc3"><span class="re1">&lt;email<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;headers<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Content-Type&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;multipart&quot;</span> <span class="re2">/&gt;</span></span>
        <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Subject&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;My subject&quot;</span> <span class="re2">/&gt;</span></span>
    <span class="sc3"><span class="re1">&lt;/headers<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;body<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;part<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;headers<span class="re2">&gt;</span></span></span>
                <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Content-Type&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;text/plain&quot;</span> <span class="re2">/&gt;</span></span>
            <span class="sc3"><span class="re1">&lt;/headers<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;body<span class="re2">&gt;</span></span></span>
                This is a plain text body
            <span class="sc3"><span class="re1">&lt;/body<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;/part<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;/body<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/email<span class="re2">&gt;</span></span></span></pre>
<p>
Notice that <code>&lt;part&gt;</code> is structured in just the same way as <code>&lt;email&gt;</code> ?  I mean, it&rsquo;s got <code>&lt;headers&gt;</code> and <code>&lt;body&gt;</code>.
</p>

<p>
We could place several different <code>&lt;part&gt;</code>s in the document and the mail client would not display them all, it would choose the most appropriate one.
</p>
<pre class="code xml"><span class="sc3"><span class="re1">&lt;email<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;headers<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Content-Type&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;multipart&quot;</span> <span class="re2">/&gt;</span></span>
        <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Subject&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;My subject&quot;</span> <span class="re2">/&gt;</span></span>
    <span class="sc3"><span class="re1">&lt;/headers<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;body<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;part<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;headers<span class="re2">&gt;</span></span></span>
                <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Content-Type&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;text/plain&quot;</span> <span class="re2">/&gt;</span></span>
            <span class="sc3"><span class="re1">&lt;/headers<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;body<span class="re2">&gt;</span></span></span>
                This is a plain text body
            <span class="sc3"><span class="re1">&lt;/body<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;/part<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;part<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;headers<span class="re2">&gt;</span></span></span>
                <span class="sc3"><span class="re1">&lt;header</span> <span class="re0">name</span>=<span class="st0">&quot;Content-Type&quot;</span> <span class="re0">value</span>=<span class="st0">&quot;text/html&quot;</span> <span class="re2">/&gt;</span></span>
            <span class="sc3"><span class="re1">&lt;/headers<span class="re2">&gt;</span></span></span>
            <span class="sc3"><span class="re1">&lt;body<span class="re2">&gt;</span></span></span>
                This is a <span class="sc3"><span class="re1">&lt;strong<span class="re2">&gt;</span></span></span>HTML<span class="sc3"><span class="re1">&lt;/strong<span class="re2">&gt;</span></span></span> body
            <span class="sc3"><span class="re1">&lt;/body<span class="re2">&gt;</span></span></span>
        <span class="sc3"><span class="re1">&lt;/part<span class="re2">&gt;</span></span></span>
    <span class="sc3"><span class="re1">&lt;/body<span class="re2">&gt;</span></span></span>
<span class="sc3"><span class="re1">&lt;/email<span class="re2">&gt;</span></span></span></pre>
</div>
<!-- SECTION "A potentially confusing preamble" [46-2233] -->
<h2><a name="multipart_and_mime_in_practice" id="multipart_and_mime_in_practice">Multipart and MIME in practice</a></h2>
<div class="level2">

<p>
 Now let&rsquo;s jump back to the real world of email :)
</p>

<p>
Apart from the <acronym title="Extensible Markup Language">XML</acronym> representation above, this is in actual fact <strong>exactly</strong> how multipart emails are formed.  Each <acronym title="Multipurpose Internet Mail Extension">MIME</acronym> part is like a minature email in itself.  It has a set of headers, but those headers contain only structural information (no Subject or recipient details etc).  Because we can nest <acronym title="Multipurpose Internet Mail Extension">MIME</acronym> parts inside the body of an email, why could we not nest <acronym title="Multipurpose Internet Mail Extension">MIME</acronym> parts inside the body of another <acronym title="Multipurpose Internet Mail Extension">MIME</acronym> part?  We can!  And in fact this is done in certain scenarios such as when embedded images are used.  It does get quite complicated once you start embeeding images, sending multiple parts and sending attachments all in the same email so luckily Swift does all the hard work for you! :)
</p>

<p>
It&rsquo;s dead simple, forget the Swift class and the connections for a moment and just think about the email itself... All you need to do is work with the Swift_Message class and it&rsquo;s attach() method.  Use the Swift_Message_Part class to add <acronym title="Multipurpose Internet Mail Extension">MIME</acronym> parts.  Swift_Message_Attachment, Swift_Message_EmbeddedFile and Swift_Message_Image are all classes which can be passed into attach().  attach() then works out where the part belongs in the overall email.
</p>
<pre class="code php"><span class="re0">$message</span> =&amp; <span class="kw2">new</span> Swift_Message<span class="br0">&#40;</span><span class="st0">&quot;My subject&quot;</span><span class="br0">&#41;</span>;
<span class="re0">$message</span>-&gt;<span class="me1">attach</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Message_Part<span class="br0">&#40;</span><span class="st0">&quot;My plain part&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="re0">$message</span>-&gt;<span class="me1">attach</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Message_Part<span class="br0">&#40;</span><span class="st0">&quot;My HTML part&quot;</span>, <span class="st0">&quot;text/html&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="re0">$message</span>-&gt;<span class="me1">attach</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Message_Attachment<span class="br0">&#40;</span><a href="http://www.php.net/file_get_contents"><span class="kw3">file_get_contents</span></a><span class="br0">&#40;</span><span class="st0">&quot;foo.pdf&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;</pre>
<p>
Easy! Right?
</p>

<p>
Anything which extends Swift_Message_Mime (Swift_Message, Swift_Message_Part, Swift_Message_Attachment, Swift_Message_EmbeddedFile, Swift_Message_Image) contains a <code>headers</code> property.  This is an instance of <a href="/wikidocs/v3/swift_message_headers" class="wikilink1" title="v3:swift_message_headers">Swift_Message_Headers</a> and allows you to manipulate the internal headers of all <acronym title="Multipurpose Internet Mail Extension">MIME</acronym> parts, attachments and the email itself of course.
</p>

<p>
Each part contains an internal caching mechanism so that once Swift has asked the message to render itself it does not need to re-render itself (unless changes have been made subsequently) when asked again.  This mechanism is quite intelligent and will only re-render the smallest unit of the email which it needs to.
</p>

<p>
If you want to dump the rendered version of the email after adding all its parts and attachments etc, you simply call it&rsquo;s build() method <del>which returns a string containing the message source as it will be sent over <acronym title="Simple Mail Transfer Protocol">SMTP</acronym></del> which returns an instance of Swift_Cache_OutputStream (a memory saving technique).  You can then use readFull() to display it in your browser.
</p>
<pre class="code php"><span class="re0">$message</span> =&amp; <span class="kw2">new</span> Swift_Message<span class="br0">&#40;</span><span class="st0">&quot;My subject&quot;</span><span class="br0">&#41;</span>;
<span class="re0">$message</span>-&gt;<span class="me1">attach</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Message_Part<span class="br0">&#40;</span><span class="st0">&quot;My plain part&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="re0">$message</span>-&gt;<span class="me1">attach</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Message_Part<span class="br0">&#40;</span><span class="st0">&quot;My HTML part&quot;</span>, <span class="st0">&quot;text/html&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
<span class="re0">$message</span>-&gt;<span class="me1">attach</span><span class="br0">&#40;</span><span class="kw2">new</span> Swift_Message_Attachment<span class="br0">&#40;</span><a href="http://www.php.net/file_get_contents"><span class="kw3">file_get_contents</span></a><span class="br0">&#40;</span><span class="st0">&quot;foo.pdf&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;
&nbsp;
<span class="re0">$stream</span> =&amp; <span class="re0">$message</span>-&gt;<span class="me1">build</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;
<a href="http://www.php.net/echo"><span class="kw3">echo</span></a> <span class="re0">$stream</span>-&gt;<span class="me1">readFull</span><span class="br0">&#40;</span><span class="br0">&#41;</span>; <span class="co1">//Dumps the email contents</span></pre>
<p>
You should refer to the complete <acronym title="Application Programming Interface">API</acronym> in the docs folder of your Swift installation for all the methods available to you.   
</p>

</div>
<!-- SECTION "Multipart and MIME in practice" [2234-] -->