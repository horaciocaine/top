a:31:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1;}i:3;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:-1;i:1;i:0;i:2;i:1;i:3;s:0:"";}i:2;i:1;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Swift's Runtime Cache";i:1;i:1;i:2;i:1;}i:2;i:1;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:467:"
Swift Mailer incorporates a runtime cache to help speed things up a lot.  Composing emails is a tough business.  You need to encode files, correct line endings, translate to formats laid out in the RFCs.  It's therefore easier if you can just do this once and once it's been done, re-use the results.  Swift caches various pieces of data (computed strings) on various different levels whilst it composes messages.  This is all handled by an abstracted caching layer.";}i:2;i:37;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:504;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:504;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:"The abstract cache is named Swift_Cache and contains methods write(), read(), readFull(), clear() and has().  All but readFull() are abstract.";}i:2;i:506;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:648;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:648;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:336:"By default, Swift will uses a Memory Cache, which essentially means it stores the encoded strings in variables which it can re-use.  The alternative is to write this data to disk and save that memory.  By writing the cache to disk, Swift should never use (much) more than about 1MB of memory, although this varies from system to system.";}i:2;i:650;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:986;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:986;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"You can easily write your own cache by extending the Swift_Cache class and implementing the abstract methods.  For examples, you could write a MySQL cache.  If you do write your own cache, just bear in mind that write() is buffered (i.e. it appends to the cache, it doesn't overwrite it) and read() is also buffered.  You may choose to ignore the buffered aspect of read() - see the Swift_Cache_Memory class for an example.";}i:2;i:988;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1411;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1411;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"Swift loads the cache by calling a factory named Swift_CacheFactory.  It's here that you can change the class which is instantiated in the factory.";}i:2;i:1413;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1560;}i:21;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:58:"
Swift_CacheFactory::setClassName("Swift_Cache_MyCache");
";i:1;s:3:"php";}i:2;i:1567;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1637;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:"If you want to use the Disk Cache (strongly recommended) then make sure you have a writable directory on disk and run the follwing just after you instantiate Swift.";}i:2;i:1639;}i:24;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1803;}i:25;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:122:"
$swift =& new Swift( ... );
Swift_CacheFactory::setClassName("Swift_Cache_Disk");
Swift_Cache_Disk::setSavePath("/tmp");
";i:1;s:3:"php";}i:2;i:1810;}i:26;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1944;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"Changes made the the cache factory are global. Swift will only ever use one type of cache at a time.";}i:2;i:1946;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2046;}i:29;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2047;}i:30;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:2047;}}