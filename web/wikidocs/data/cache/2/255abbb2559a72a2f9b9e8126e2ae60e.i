a:94:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1;}i:3;a:3:{i:0;s:12:"section_edit";i:1;a:4:{i:0;i:-1;i:1;i:0;i:2;i:1;i:3;s:0:"";}i:2;i:1;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"What's changed in Version 4?";i:1;i:3;i:2;i:1;}i:2;i:1;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:41;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"No more PHP 4";i:1;i:4;i:2;i:41;}i:2;i:41;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:41;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"
Version 4 introduces a number of massive changes.  Probably the most significant change to end-users is the fact that Swift Mailer Version 4 does not work with ";}i:2;i:63;}i:11;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:224;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" 4 at all.  I have no plans to support ";}i:2;i:227;}i:13;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:266;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" 4 so please do not email me and beg me to do so ;)";}i:2;i:269;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:320;}i:16;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:322;}i:17;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Re-written, again";i:1;i:4;i:2;i:322;}i:2;i:322;}i:18;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:322;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:347;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"
Besides the system requirements, the interface of Swift has changed significantly in some areas.  To the ";}i:2;i:348;}i:21;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:454;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"average";}i:2;i:455;}i:23;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:462;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:614:" Swift user these changes will no doubt appear as nothing more than a few naming changes, but to those developers who had hacked the previous version of Swift to do add some custom behaviour the changes will jump out immediately.  Version 4 has been completely rewritten from the ground up.  That is to say, not a single line of code has been taken from Version 3.  It's taken me a long time to finish writing the library because of this fact, but the end result is something I'm extremely proud of.  It's fresh, it's flexible, it's test-friendly and I'd like to think that it's a great demonstration of just what ";}i:2;i:463;}i:25;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"PHP";}i:2;i:1077;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" is capable of!";}i:2;i:1080;}i:27;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1095;}i:28;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1097;}i:29;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Dependency Injection";i:1;i:4;i:2;i:1097;}i:2;i:1097;}i:30;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1097;}i:31;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1125;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:310:"
This version of Swift Mailer uses dependency injection everywhere below the surface.  For the most part this will be transparent to end-users since I have decorated the constructors where this injection occurs.  The dependency injection is one of the primary reasons the library is very test-friendly however.";}i:2;i:1126;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1436;}i:34;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1438;}i:35;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Focused on internationalization";i:1;i:4;i:2;i:1438;}i:2;i:1438;}i:36;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1438;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1477;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:558:"
If you ever tried doing much with international character sets in version 3 there's a good chance you ran into a few hurdles.  Everywhere text processing happens in version 4, the charset is used to ensure text does not become garbled.  E-mail requires everything gets sent in 7-bit ascii and then transformed back into it's 8-bit form at the recipient's end.  Swift Mailer Version 4 includes a completely custom quoted-printable encoder following the rules specified in RFC 2045 to the word.  Believe me, meeting all requirements of that RFC is not easy ;)";}i:2;i:1478;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2036;}i:40;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2038;}i:41;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"No more connections";i:1;i:4;i:2;i:2038;}i:2;i:2038;}i:42;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2038;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2065;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"
What! You say?  Well, I do have to wonder why I called the various mailing mechanisms in Version 3 ";}i:2;i:2066;}i:45;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2166;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Connections";}i:2;i:2167;}i:47;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2178;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:".  Version 3 only spoke in ";}i:2;i:2179;}i:49;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"SMTP";}i:2;i:2206;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:", so to get Swift Mailer to send an email using the mail() function I had to write a class which conjured up a ";}i:2;i:2210;}i:51;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2321;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"fake";}i:2;i:2322;}i:53;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2326;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2327;}i:55;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"SMTP";}i:2;i:2328;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" conversation just to make it work.  Version 4 takes the abstraction further and replaces all ";}i:2;i:2332;}i:57;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2426;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Connection";}i:2;i:2427;}i:59;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2437;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" classes with ";}i:2;i:2438;}i:61;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2452;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Transport";}i:2;i:2453;}i:63;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2462;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:" classes.  Each Transport knows whatever language it needs to know; the main Mailer class itself only knows how to use a Transport.  What does this mean for you guys?  It means faster, more efficient sending, more accurate error messages AND FINALLY!  ";}i:2;i:2463;}i:65;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2715;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"sendmail -t";}i:2;i:2716;}i:67;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2727;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" support!";}i:2;i:2728;}i:69;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2737;}i:70;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2739;}i:71;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"More streamlined message composition";i:1;i:4;i:2;i:2739;}i:2;i:2739;}i:72;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:2739;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2783;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"
Rather than trying to explain this in writing, let me show you two comparisons sending an email with two attachments in version 3, then again in version 4.";}i:2;i:2784;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2940;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2942;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Version 3";i:1;i:5;i:2;i:2942;}i:2;i:2942;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:2942;}i:79;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:630:"
$swift = new Swift(new Swift_Connection_SMTP('localhost'));

$message = new Swift_Message('My subject');
$message->attach(new Swift_Mime_Part('Reports as requested man!'));
$message->attach(new Swift_Message_Attachment(new Swift_File('report-jan-mar-08.pdf'), 'report-jan-mar-08.pdf', 'application/pdf'));
$message->attach(new Swift_Message_Attachment(new Swift_File('report-mar-jun-08.pdf'), 'report-mar-jun-08.pdf', 'application/pdf'));

if ($swift->send($message, new Swift_Address('receiver@domain.tld', 'Person'), new Swift_Address('you@domain.tld', 'You')))
{
  echo "Message sent";
}
else
{
  echo "A problem occurred";
}
";i:1;s:3:"php";}i:2;i:2964;}i:80;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3608;}i:81;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Version 4";i:1;i:5;i:2;i:3608;}i:2;i:3608;}i:82;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:3608;}i:83;a:3:{i:0;s:4:"code";i:1;a:2:{i:0;s:471:"
$mailer = new Swift_Mailer(new Swift_SmtpTransport('localhost'));

$message = Swift_Message::newInstance('My subject', 'Reports as requested man!')
  ->setFrom(array('you@domain.tld' => 'You'))
  ->setTo(array('receiver@domain.tld' => 'Person'))
  ->attach(Swift_Attachment::fromPath('report-jan-mar-08.pdf'))
  ->attach(Swift_Attachment::fromPath('report-mar-jun-08.pdf'));

if ($mailer->send($message))
{
  echo "Message sent";
}
else
{
  echo "A problem occurred";
}
";i:1;s:3:"php";}i:2;i:3630;}i:84;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4115;}i:85;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"New Plugin API";i:1;i:4;i:2;i:4115;}i:2;i:4115;}i:86;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:4115;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4137;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"
Version 4 comes with a new event-driven plugin ";}i:2;i:4138;}i:89;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:4186;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:".  It's not vastly different from that in Version 3, but it does allow you to cancel events and is in theory faster; though I have not yet benchmarked it.";}i:2;i:4189;}i:91;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4343;}i:92;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4344;}i:93;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:4344;}}