<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Download extends BaseDownload implements Swift_Website_Download
{
  
  /** Alpha version number */
  const STATUS_ALPHA = 1;
  
  /** Beta version number */
  const STATUS_BETA = 2;
  
  /** RC version number */
  const STATUS_RC = 3;
  
  /** Final version number */
  const STATUS_FINAL = 4;
  
  /** Regular expression for generally used version number formats */
  const VERSION_PATTERN = '~([0-9]+)(?:\.([0-9]+))?(?:\.([0-9]+))?(?:-(alpha|a|beta|b|rc)-?([0-9]+))?~i';
  
  /**
   * Get the unique ID for this download.
   * 
   * @return int
   */
  public function getDownloadId()
  {
    return $this->get('id');
  }
  
  /**
   * Set the name of the file.
   * 
   * @param string $name
   */
  public function setName($name)
  {
    $this->setVersionNumber($this->_computeVersionNumber($name));
    return $this->set('filename', $name);
  }
  
  /**
   * Get the file name of the download.
   * 
   * @return string
   */
  public function getName()
  {
    return $this->get('filename');
  }
  
  /**
   * Set the remote source where the file is listed.
   * 
   * @param string $source
   */
  public function setSource($source)
  {
    return $this->set('source', $source);
  }
  
  /**
   * Get the source of the download.
   * 
   * @return string
   * 
   * @see SOURCE_SOURCEFORGE, SOURCE_GOOGLECODE, SOURCE_GITHUB
   */
  public function getSource()
  {
    return $this->get('source');
  }
  
  /**
   * Set the size of the download in bytes.
   * 
   * @param int $size
   */
  public function setSize($size)
  {
    return $this->set('filesize', $size);
  }
  
  /**
   * Get the size of the download in bytes.
   * 
   * @return int
   */
  public function getSize()
  {
    return $this->get('filesize');
  }
  
  /**
   * Set the time at which this download was created.
   * 
   * @param int $timestamp
   */
  public function setTimeCreated($timestamp)
  {
    return $this->set('time_created', $timestamp);
  }
  
  /**
   * Get the release date of the download.
   * 
   * @return int
   */
  public function getTimeCreated()
  {
    return $this->get('time_created');
  }
  
  /**
   * Test if this download has been revoked from public consumption.
   * 
   * @return boolean
   */
  public function isRevoked()
  {
    return (boolean) $this->get('revoked');
  }
  
  /**
   * Revoke this download from public consumption.
   * 
   * @param boolean $revoked
   */
  public function setRevoked($revoked = true)
  {
    return $this->set('revoked', $revoked);
  }
  
  /**
   * Test if this download is considered stable.
   * 
   * @return boolean
   */
  public function isStable()
  {
    return (boolean) $this->get('stable');
  }
  
  /**
   * Mark this download as stable or not.
   * 
   * @param boolean $stable
   */
  public function setStable($stable = true)
  {
    return $this->set('stable', $stable);
  }
  
  /**
   * Get the version of this download.
   * 
   * @return string
   */
  public function getVersion()
  {
    if (preg_match(self::VERSION_PATTERN, $this->getName(), $matches))
    {
      return $matches[0];
    }
    else
    {
      return '0.0.0';
    }
  }
  
  /**
   * Get a numeric string that can be sorted.
   * 
   * @return string
   */
  public function getVersionNumber()
  {
    return $this->get('version_number');
  }
  
  /**
   * Get the URL of this download.
   * 
   * @return string
   */
  public function getUrl()
  {
    return Zend_Registry::getInstance()->get('download_resolver')
      ->getDownloadUrl($this->getName(), $this->getSource())
      ;
  }
  
  // -- Private Methods
  
  private function _computeVersionNumber($filename)
  {
    // Major-Minor-Revsion-Alpha/Beta/RC-StatusVersion
    // i.e for 4.0.0-rc1
    //         004-000-000-3-001
    // Alpha = 1
    // Beta  = 2
    // RC    = 3
    // Final = 4
    
    $format = '%03d-%03d-%03d-%d-%03d';
    
    $major = 0;
    $minor = 0;
    $revision = 0;
    $status = self::STATUS_FINAL;
    $statusVersion = 0;
    
    if (preg_match(self::VERSION_PATTERN, $filename, $matches))
    {
      if (!empty($matches[1]))
      {
        $major = (int) $matches[1];
      }
      
      if (!empty($matches[2]))
      {
        $minor = (int) $matches[2];
      }
      
      if (!empty($matches[3]))
      {
        $revision = (int) $matches[3];
      }
      
      if (!empty($matches[4]))
      {
        switch (strtolower($matches[4]))
        {
          case 'a':
          case 'alpha':
            $status = self::STATUS_ALPHA;
            break;
          
          case 'b':
          case 'beta':
            $status = self::STATUS_BETA;
            break;
          
          case 'rc':
            $status = self::STATUS_RC;
            break;
          
          case 'final':
          default:
            $status = self::STATUS_FINAL;
            break;
        }
      }
      
      if (!empty($matches[5]))
      {
        $statusVersion = (int) $matches[5];
      }
    }
    
    return sprintf($format, $major, $minor, $revision, $status, $statusVersion);
  }
  
}